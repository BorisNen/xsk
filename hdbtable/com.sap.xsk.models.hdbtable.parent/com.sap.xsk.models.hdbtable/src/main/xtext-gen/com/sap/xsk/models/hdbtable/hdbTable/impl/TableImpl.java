/**
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbtable.hdbTable.impl;

import com.sap.xsk.models.hdbtable.hdbTable.ColumnType;
import com.sap.xsk.models.hdbtable.hdbTable.HdbTablePackage;
import com.sap.xsk.models.hdbtable.hdbTable.Table;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Table</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#isSchema <em>Schema</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#getSchemaName <em>Schema Name</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#isType <em>Type</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#getTypeValue <em>Type Value</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#isDescription <em>Description</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#getDescriptionText <em>Description Text</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#isColumns <em>Columns</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#getColumnsValues <em>Columns Values</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#isPrimaryKeyColumns <em>Primary Key Columns</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.TableImpl#getTablePrimaryKeyColumnsValues <em>Table Primary Key Columns Values</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TableImpl extends MinimalEObjectImpl.Container implements Table
{
  /**
   * The default value of the '{@link #isSchema() <em>Schema</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSchema()
   * @generated
   * @ordered
   */
  protected static final boolean SCHEMA_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSchema() <em>Schema</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSchema()
   * @generated
   * @ordered
   */
  protected boolean schema = SCHEMA_EDEFAULT;

  /**
   * The default value of the '{@link #getSchemaName() <em>Schema Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchemaName()
   * @generated
   * @ordered
   */
  protected static final String SCHEMA_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSchemaName() <em>Schema Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchemaName()
   * @generated
   * @ordered
   */
  protected String schemaName = SCHEMA_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isType()
   * @generated
   * @ordered
   */
  protected static final boolean TYPE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isType()
   * @generated
   * @ordered
   */
  protected boolean type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getTypeValue() <em>Type Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeValue()
   * @generated
   * @ordered
   */
  protected static final String TYPE_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeValue() <em>Type Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeValue()
   * @generated
   * @ordered
   */
  protected String typeValue = TYPE_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #isDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDescription()
   * @generated
   * @ordered
   */
  protected static final boolean DESCRIPTION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDescription()
   * @generated
   * @ordered
   */
  protected boolean description = DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getDescriptionText() <em>Description Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescriptionText()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_TEXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescriptionText() <em>Description Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescriptionText()
   * @generated
   * @ordered
   */
  protected String descriptionText = DESCRIPTION_TEXT_EDEFAULT;

  /**
   * The default value of the '{@link #isColumns() <em>Columns</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isColumns()
   * @generated
   * @ordered
   */
  protected static final boolean COLUMNS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isColumns() <em>Columns</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isColumns()
   * @generated
   * @ordered
   */
  protected boolean columns = COLUMNS_EDEFAULT;

  /**
   * The cached value of the '{@link #getColumnsValues() <em>Columns Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnsValues()
   * @generated
   * @ordered
   */
  protected EList<ColumnType> columnsValues;

  /**
   * The default value of the '{@link #isPrimaryKeyColumns() <em>Primary Key Columns</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrimaryKeyColumns()
   * @generated
   * @ordered
   */
  protected static final boolean PRIMARY_KEY_COLUMNS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPrimaryKeyColumns() <em>Primary Key Columns</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrimaryKeyColumns()
   * @generated
   * @ordered
   */
  protected boolean primaryKeyColumns = PRIMARY_KEY_COLUMNS_EDEFAULT;

  /**
   * The cached value of the '{@link #getTablePrimaryKeyColumnsValues() <em>Table Primary Key Columns Values</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTablePrimaryKeyColumnsValues()
   * @generated
   * @ordered
   */
  protected EList<String> tablePrimaryKeyColumnsValues;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HdbTablePackage.Literals.TABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isSchema()
  {
    return schema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSchema(boolean newSchema)
  {
    boolean oldSchema = schema;
    schema = newSchema;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__SCHEMA, oldSchema, schema));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSchemaName()
  {
    return schemaName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSchemaName(String newSchemaName)
  {
    String oldSchemaName = schemaName;
    schemaName = newSchemaName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__SCHEMA_NAME, oldSchemaName, schemaName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(boolean newType)
  {
    boolean oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypeValue()
  {
    return typeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeValue(String newTypeValue)
  {
    String oldTypeValue = typeValue;
    typeValue = newTypeValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__TYPE_VALUE, oldTypeValue, typeValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDescription(boolean newDescription)
  {
    boolean oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDescriptionText()
  {
    return descriptionText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDescriptionText(String newDescriptionText)
  {
    String oldDescriptionText = descriptionText;
    descriptionText = newDescriptionText;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__DESCRIPTION_TEXT, oldDescriptionText, descriptionText));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isColumns()
  {
    return columns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColumns(boolean newColumns)
  {
    boolean oldColumns = columns;
    columns = newColumns;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__COLUMNS, oldColumns, columns));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ColumnType> getColumnsValues()
  {
    if (columnsValues == null)
    {
      columnsValues = new EObjectContainmentEList<ColumnType>(ColumnType.class, this, HdbTablePackage.TABLE__COLUMNS_VALUES);
    }
    return columnsValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isPrimaryKeyColumns()
  {
    return primaryKeyColumns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrimaryKeyColumns(boolean newPrimaryKeyColumns)
  {
    boolean oldPrimaryKeyColumns = primaryKeyColumns;
    primaryKeyColumns = newPrimaryKeyColumns;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.TABLE__PRIMARY_KEY_COLUMNS, oldPrimaryKeyColumns, primaryKeyColumns));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getTablePrimaryKeyColumnsValues()
  {
    if (tablePrimaryKeyColumnsValues == null)
    {
      tablePrimaryKeyColumnsValues = new EDataTypeEList<String>(String.class, this, HdbTablePackage.TABLE__TABLE_PRIMARY_KEY_COLUMNS_VALUES);
    }
    return tablePrimaryKeyColumnsValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HdbTablePackage.TABLE__COLUMNS_VALUES:
        return ((InternalEList<?>)getColumnsValues()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HdbTablePackage.TABLE__SCHEMA:
        return isSchema();
      case HdbTablePackage.TABLE__SCHEMA_NAME:
        return getSchemaName();
      case HdbTablePackage.TABLE__TYPE:
        return isType();
      case HdbTablePackage.TABLE__TYPE_VALUE:
        return getTypeValue();
      case HdbTablePackage.TABLE__DESCRIPTION:
        return isDescription();
      case HdbTablePackage.TABLE__DESCRIPTION_TEXT:
        return getDescriptionText();
      case HdbTablePackage.TABLE__COLUMNS:
        return isColumns();
      case HdbTablePackage.TABLE__COLUMNS_VALUES:
        return getColumnsValues();
      case HdbTablePackage.TABLE__PRIMARY_KEY_COLUMNS:
        return isPrimaryKeyColumns();
      case HdbTablePackage.TABLE__TABLE_PRIMARY_KEY_COLUMNS_VALUES:
        return getTablePrimaryKeyColumnsValues();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HdbTablePackage.TABLE__SCHEMA:
        setSchema((Boolean)newValue);
        return;
      case HdbTablePackage.TABLE__SCHEMA_NAME:
        setSchemaName((String)newValue);
        return;
      case HdbTablePackage.TABLE__TYPE:
        setType((Boolean)newValue);
        return;
      case HdbTablePackage.TABLE__TYPE_VALUE:
        setTypeValue((String)newValue);
        return;
      case HdbTablePackage.TABLE__DESCRIPTION:
        setDescription((Boolean)newValue);
        return;
      case HdbTablePackage.TABLE__DESCRIPTION_TEXT:
        setDescriptionText((String)newValue);
        return;
      case HdbTablePackage.TABLE__COLUMNS:
        setColumns((Boolean)newValue);
        return;
      case HdbTablePackage.TABLE__COLUMNS_VALUES:
        getColumnsValues().clear();
        getColumnsValues().addAll((Collection<? extends ColumnType>)newValue);
        return;
      case HdbTablePackage.TABLE__PRIMARY_KEY_COLUMNS:
        setPrimaryKeyColumns((Boolean)newValue);
        return;
      case HdbTablePackage.TABLE__TABLE_PRIMARY_KEY_COLUMNS_VALUES:
        getTablePrimaryKeyColumnsValues().clear();
        getTablePrimaryKeyColumnsValues().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HdbTablePackage.TABLE__SCHEMA:
        setSchema(SCHEMA_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__SCHEMA_NAME:
        setSchemaName(SCHEMA_NAME_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__TYPE_VALUE:
        setTypeValue(TYPE_VALUE_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__DESCRIPTION_TEXT:
        setDescriptionText(DESCRIPTION_TEXT_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__COLUMNS:
        setColumns(COLUMNS_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__COLUMNS_VALUES:
        getColumnsValues().clear();
        return;
      case HdbTablePackage.TABLE__PRIMARY_KEY_COLUMNS:
        setPrimaryKeyColumns(PRIMARY_KEY_COLUMNS_EDEFAULT);
        return;
      case HdbTablePackage.TABLE__TABLE_PRIMARY_KEY_COLUMNS_VALUES:
        getTablePrimaryKeyColumnsValues().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HdbTablePackage.TABLE__SCHEMA:
        return schema != SCHEMA_EDEFAULT;
      case HdbTablePackage.TABLE__SCHEMA_NAME:
        return SCHEMA_NAME_EDEFAULT == null ? schemaName != null : !SCHEMA_NAME_EDEFAULT.equals(schemaName);
      case HdbTablePackage.TABLE__TYPE:
        return type != TYPE_EDEFAULT;
      case HdbTablePackage.TABLE__TYPE_VALUE:
        return TYPE_VALUE_EDEFAULT == null ? typeValue != null : !TYPE_VALUE_EDEFAULT.equals(typeValue);
      case HdbTablePackage.TABLE__DESCRIPTION:
        return description != DESCRIPTION_EDEFAULT;
      case HdbTablePackage.TABLE__DESCRIPTION_TEXT:
        return DESCRIPTION_TEXT_EDEFAULT == null ? descriptionText != null : !DESCRIPTION_TEXT_EDEFAULT.equals(descriptionText);
      case HdbTablePackage.TABLE__COLUMNS:
        return columns != COLUMNS_EDEFAULT;
      case HdbTablePackage.TABLE__COLUMNS_VALUES:
        return columnsValues != null && !columnsValues.isEmpty();
      case HdbTablePackage.TABLE__PRIMARY_KEY_COLUMNS:
        return primaryKeyColumns != PRIMARY_KEY_COLUMNS_EDEFAULT;
      case HdbTablePackage.TABLE__TABLE_PRIMARY_KEY_COLUMNS_VALUES:
        return tablePrimaryKeyColumnsValues != null && !tablePrimaryKeyColumnsValues.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (schema: ");
    result.append(schema);
    result.append(", schemaName: ");
    result.append(schemaName);
    result.append(", type: ");
    result.append(type);
    result.append(", typeValue: ");
    result.append(typeValue);
    result.append(", description: ");
    result.append(description);
    result.append(", descriptionText: ");
    result.append(descriptionText);
    result.append(", columns: ");
    result.append(columns);
    result.append(", primaryKeyColumns: ");
    result.append(primaryKeyColumns);
    result.append(", tablePrimaryKeyColumnsValues: ");
    result.append(tablePrimaryKeyColumnsValues);
    result.append(')');
    return result.toString();
  }

} //TableImpl
