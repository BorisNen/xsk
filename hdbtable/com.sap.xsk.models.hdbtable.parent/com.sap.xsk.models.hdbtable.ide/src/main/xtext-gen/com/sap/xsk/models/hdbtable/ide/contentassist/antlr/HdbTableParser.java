/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbtable.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.sap.xsk.models.hdbtable.ide.contentassist.antlr.internal.InternalHdbTableParser;
import com.sap.xsk.models.hdbtable.services.HdbTableGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class HdbTableParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HdbTableGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HdbTableGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_0(), "rule__ColumnType__Group_0__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_1(), "rule__ColumnType__Group_1__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_2(), "rule__ColumnType__Group_2__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_3(), "rule__ColumnType__Group_3__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_3_0(), "rule__ColumnType__Group_3_0__0");
			builder.put(grammarAccess.getTableAccess().getGroup_0(), "rule__Table__Group_0__0");
			builder.put(grammarAccess.getTableAccess().getGroup_1(), "rule__Table__Group_1__0");
			builder.put(grammarAccess.getTableAccess().getGroup_2(), "rule__Table__Group_2__0");
			builder.put(grammarAccess.getTableAccess().getGroup_3(), "rule__Table__Group_3__0");
			builder.put(grammarAccess.getTableAccess().getGroup_3_3(), "rule__Table__Group_3_3__0");
			builder.put(grammarAccess.getTableAccess().getGroup_3_3_1(), "rule__Table__Group_3_3_1__0");
			builder.put(grammarAccess.getTableAccess().getGroup_4(), "rule__Table__Group_4__0");
			builder.put(grammarAccess.getTableAccess().getGroup_4_3(), "rule__Table__Group_4_3__0");
			builder.put(grammarAccess.getTableAccess().getGroup_4_3_1(), "rule__Table__Group_4_3_1__0");
			builder.put(grammarAccess.getHdbTableModelAccess().getTableElementAssignment(), "rule__HdbTableModel__TableElementAssignment");
			builder.put(grammarAccess.getColumnTypeAccess().getColumnNameAssignment_0_3(), "rule__ColumnType__ColumnNameAssignment_0_3");
			builder.put(grammarAccess.getColumnTypeAccess().getColumnSqlTypeAssignment_1_2(), "rule__ColumnType__ColumnSqlTypeAssignment_1_2");
			builder.put(grammarAccess.getColumnTypeAccess().getColumnLengthAssignment_2_2(), "rule__ColumnType__ColumnLengthAssignment_2_2");
			builder.put(grammarAccess.getColumnTypeAccess().getColumnNullableAssignment_3_0_2(), "rule__ColumnType__ColumnNullableAssignment_3_0_2");
			builder.put(grammarAccess.getTableAccess().getSchemaAssignment_0_0(), "rule__Table__SchemaAssignment_0_0");
			builder.put(grammarAccess.getTableAccess().getSchemaNameAssignment_0_2(), "rule__Table__SchemaNameAssignment_0_2");
			builder.put(grammarAccess.getTableAccess().getTypeAssignment_1_0(), "rule__Table__TypeAssignment_1_0");
			builder.put(grammarAccess.getTableAccess().getTypeValueAssignment_1_2(), "rule__Table__TypeValueAssignment_1_2");
			builder.put(grammarAccess.getTableAccess().getDescriptionAssignment_2_0(), "rule__Table__DescriptionAssignment_2_0");
			builder.put(grammarAccess.getTableAccess().getDescriptionTextAssignment_2_2(), "rule__Table__DescriptionTextAssignment_2_2");
			builder.put(grammarAccess.getTableAccess().getColumnsAssignment_3_0(), "rule__Table__ColumnsAssignment_3_0");
			builder.put(grammarAccess.getTableAccess().getColumnsValuesAssignment_3_3_0(), "rule__Table__ColumnsValuesAssignment_3_3_0");
			builder.put(grammarAccess.getTableAccess().getColumnsValuesAssignment_3_3_1_1(), "rule__Table__ColumnsValuesAssignment_3_3_1_1");
			builder.put(grammarAccess.getTableAccess().getPrimaryKeyColumnsAssignment_4_0(), "rule__Table__PrimaryKeyColumnsAssignment_4_0");
			builder.put(grammarAccess.getTableAccess().getTablePrimaryKeyColumnsValuesAssignment_4_3_0(), "rule__Table__TablePrimaryKeyColumnsValuesAssignment_4_3_0");
			builder.put(grammarAccess.getTableAccess().getTablePrimaryKeyColumnsValuesAssignment_4_3_1_1(), "rule__Table__TablePrimaryKeyColumnsValuesAssignment_4_3_1_1");
			builder.put(grammarAccess.getColumnTypeAccess().getUnorderedGroup(), "rule__ColumnType__UnorderedGroup");
			builder.put(grammarAccess.getTableAccess().getUnorderedGroup(), "rule__Table__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HdbTableGrammarAccess grammarAccess;

	@Override
	protected InternalHdbTableParser createParser() {
		InternalHdbTableParser result = new InternalHdbTableParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HdbTableGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HdbTableGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
