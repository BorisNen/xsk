/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.xsodata.serializer;

import com.google.inject.Inject;
import com.sap.xsk.models.xsodata.model.Association;
import com.sap.xsk.models.xsodata.model.Entity;
import com.sap.xsk.models.xsodata.model.ModelPackage;
import com.sap.xsk.models.xsodata.model.Navigation;
import com.sap.xsk.models.xsodata.model.Service;
import com.sap.xsk.models.xsodata.model.XsOData;
import com.sap.xsk.models.xsodata.services.ModelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.ASSOCIATION:
				sequence_Association(context, (Association) semanticObject); 
				return; 
			case ModelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ModelPackage.NAVIGATION:
				sequence_Navigation(context, (Navigation) semanticObject); 
				return; 
			case ModelPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			case ModelPackage.XS_ODATA:
				sequence_XsOData(context, (XsOData) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Association returns Association
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         principal=AssociationPrincipal 
	 *         principalKey=AssociationPrincipalKey 
	 *         principalMultiplicity=MultiplicityType 
	 *         dependent=AssociationDependent 
	 *         dependentProperty=AssociationDependentProperty 
	 *         dependentMultiplicity=MultiplicityType
	 *     )
	 */
	protected void sequence_Association(ISerializationContext context, Association semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__NAME));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__PRINCIPAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__PRINCIPAL));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__PRINCIPAL_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__PRINCIPAL_KEY));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__PRINCIPAL_MULTIPLICITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__PRINCIPAL_MULTIPLICITY));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__DEPENDENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__DEPENDENT));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__DEPENDENT_PROPERTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__DEPENDENT_PROPERTY));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ASSOCIATION__DEPENDENT_MULTIPLICITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ASSOCIATION__DEPENDENT_MULTIPLICITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssociationAccess().getPrincipalAssociationPrincipalParserRuleCall_3_0(), semanticObject.getPrincipal());
		feeder.accept(grammarAccess.getAssociationAccess().getPrincipalKeyAssociationPrincipalKeyParserRuleCall_5_0(), semanticObject.getPrincipalKey());
		feeder.accept(grammarAccess.getAssociationAccess().getPrincipalMultiplicityMultiplicityTypeParserRuleCall_8_0(), semanticObject.getPrincipalMultiplicity());
		feeder.accept(grammarAccess.getAssociationAccess().getDependentAssociationDependentParserRuleCall_10_0(), semanticObject.getDependent());
		feeder.accept(grammarAccess.getAssociationAccess().getDependentPropertyAssociationDependentPropertyParserRuleCall_12_0(), semanticObject.getDependentProperty());
		feeder.accept(grammarAccess.getAssociationAccess().getDependentMultiplicityMultiplicityTypeParserRuleCall_15_0(), semanticObject.getDependentMultiplicity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (
	 *         namespace=EntityQualifiedNamespace 
	 *         name=EntityQualifiedName 
	 *         alias=EntityQualifiedAlias 
	 *         navigates+=Navigation* 
	 *         createEvents+=CreateEvent* 
	 *         deleteUsing+=DeleteUsing? 
	 *         update+=Update?
	 *     )
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Navigation returns Navigation
	 *
	 * Constraint:
	 *     (association=NavigationAssociation alias=NavigationAlias)
	 */
	protected void sequence_Navigation(ISerializationContext context, Navigation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.NAVIGATION__ASSOCIATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.NAVIGATION__ASSOCIATION));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.NAVIGATION__ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.NAVIGATION__ALIAS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNavigationAccess().getAssociationNavigationAssociationParserRuleCall_2_0(), semanticObject.getAssociation());
		feeder.accept(grammarAccess.getNavigationAccess().getAliasNavigationAliasParserRuleCall_4_0(), semanticObject.getAlias());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Service
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (name=QualifiedName entities+=Entity* associations+=Association*)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XsOData returns XsOData
	 *
	 * Constraint:
	 *     elements+=Type+
	 */
	protected void sequence_XsOData(ISerializationContext context, XsOData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
