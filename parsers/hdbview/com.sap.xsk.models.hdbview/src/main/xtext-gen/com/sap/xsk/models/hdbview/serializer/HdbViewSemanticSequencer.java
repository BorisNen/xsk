/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbview.serializer;

import com.google.inject.Inject;
import com.sap.xsk.models.hdbview.hdbView.HdbViewModel;
import com.sap.xsk.models.hdbview.hdbView.HdbViewPackage;
import com.sap.xsk.models.hdbview.hdbView.View;
import com.sap.xsk.models.hdbview.services.HdbViewGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HdbViewSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HdbViewGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HdbViewPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HdbViewPackage.HDB_VIEW_MODEL:
				sequence_HdbViewModel(context, (HdbViewModel) semanticObject); 
				return; 
			case HdbViewPackage.VIEW:
				sequence_View(context, (View) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HdbViewModel returns HdbViewModel
	 *
	 * Constraint:
	 *     viewElement=View
	 */
	protected void sequence_HdbViewModel(ISerializationContext context, HdbViewModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HdbViewPackage.Literals.HDB_VIEW_MODEL__VIEW_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HdbViewPackage.Literals.HDB_VIEW_MODEL__VIEW_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHdbViewModelAccess().getViewElementViewParserRuleCall_0(), semanticObject.getViewElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     View returns View
	 *
	 * Constraint:
	 *     (
	 *         (schema?='schema' schemaName=STRING) | 
	 *         (query?='query' queryValue=STRING) | 
	 *         (dependsOn?='depends_on' (dependsOnValues+=STRING dependsOnValues+=STRING*)?)
	 *     )+
	 */
	protected void sequence_View(ISerializationContext context, View semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
