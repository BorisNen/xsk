/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbti.serializer;

import com.google.inject.Inject;
import com.sap.xsk.models.hdbti.myHdbti.GroupType;
import com.sap.xsk.models.hdbti.myHdbti.HdbdtiModel;
import com.sap.xsk.models.hdbti.myHdbti.Import;
import com.sap.xsk.models.hdbti.myHdbti.ImportConfig;
import com.sap.xsk.models.hdbti.myHdbti.MyHdbtiPackage;
import com.sap.xsk.models.hdbti.services.HdbtiGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HdbtiSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HdbtiGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyHdbtiPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyHdbtiPackage.GROUP_TYPE:
				sequence_GroupType(context, (GroupType) semanticObject); 
				return; 
			case MyHdbtiPackage.HDBDTI_MODEL:
				sequence_HdbdtiModel(context, (HdbdtiModel) semanticObject); 
				return; 
			case MyHdbtiPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case MyHdbtiPackage.IMPORT_CONFIG:
				sequence_ImportConfig(context, (ImportConfig) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     GroupType returns GroupType
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_GroupType(ISerializationContext context, GroupType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyHdbtiPackage.Literals.GROUP_TYPE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyHdbtiPackage.Literals.GROUP_TYPE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGroupTypeAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HdbdtiModel returns HdbdtiModel
	 *
	 * Constraint:
	 *     importElement=Import
	 */
	protected void sequence_HdbdtiModel(ISerializationContext context, HdbdtiModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyHdbtiPackage.Literals.HDBDTI_MODEL__IMPORT_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyHdbtiPackage.Literals.HDBDTI_MODEL__IMPORT_ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHdbdtiModelAccess().getImportElementImportParserRuleCall_0(), semanticObject.getImportElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImportConfig returns ImportConfig
	 *
	 * Constraint:
	 *     {ImportConfig}
	 */
	protected void sequence_ImportConfig(ISerializationContext context, ImportConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (values+=ImportConfig values+=ImportConfig*)
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
