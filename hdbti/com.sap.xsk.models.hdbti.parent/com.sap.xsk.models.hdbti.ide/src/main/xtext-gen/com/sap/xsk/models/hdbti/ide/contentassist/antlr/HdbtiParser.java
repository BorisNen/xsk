/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbti.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.sap.xsk.models.hdbti.ide.contentassist.antlr.internal.InternalHdbtiParser;
import com.sap.xsk.models.hdbti.services.HdbtiGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class HdbtiParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HdbtiGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HdbtiGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGroupTypeAccess().getGroup(), "rule__GroupType__Group__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_0(), "rule__ImportConfig__Group_0__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_1(), "rule__ImportConfig__Group_1__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_2(), "rule__ImportConfig__Group_2__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_3(), "rule__ImportConfig__Group_3__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_4(), "rule__ImportConfig__Group_4__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_5(), "rule__ImportConfig__Group_5__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_5_3(), "rule__ImportConfig__Group_5_3__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_5_3_1(), "rule__ImportConfig__Group_5_3_1__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_6(), "rule__ImportConfig__Group_6__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_7(), "rule__ImportConfig__Group_7__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_8(), "rule__ImportConfig__Group_8__0");
			builder.put(grammarAccess.getImportConfigAccess().getGroup_8_0(), "rule__ImportConfig__Group_8_0__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup_3(), "rule__Import__Group_3__0");
			builder.put(grammarAccess.getImportAccess().getGroup_3_1(), "rule__Import__Group_3_1__0");
			builder.put(grammarAccess.getHdbdtiModelAccess().getImportElementAssignment(), "rule__HdbdtiModel__ImportElementAssignment");
			builder.put(grammarAccess.getGroupTypeAccess().getValueAssignment_2(), "rule__GroupType__ValueAssignment_2");
			builder.put(grammarAccess.getImportConfigAccess().getTableAssignment_0_1(), "rule__ImportConfig__TableAssignment_0_1");
			builder.put(grammarAccess.getImportConfigAccess().getTableValueAssignment_0_3(), "rule__ImportConfig__TableValueAssignment_0_3");
			builder.put(grammarAccess.getImportConfigAccess().getSchemaAssignment_1_0(), "rule__ImportConfig__SchemaAssignment_1_0");
			builder.put(grammarAccess.getImportConfigAccess().getSchemaValueAssignment_1_2(), "rule__ImportConfig__SchemaValueAssignment_1_2");
			builder.put(grammarAccess.getImportConfigAccess().getFileAssignment_2_0(), "rule__ImportConfig__FileAssignment_2_0");
			builder.put(grammarAccess.getImportConfigAccess().getFileValueAssignment_2_2(), "rule__ImportConfig__FileValueAssignment_2_2");
			builder.put(grammarAccess.getImportConfigAccess().getDelimFieldAssignment_3_0(), "rule__ImportConfig__DelimFieldAssignment_3_0");
			builder.put(grammarAccess.getImportConfigAccess().getDelimFieldValueAssignment_3_2(), "rule__ImportConfig__DelimFieldValueAssignment_3_2");
			builder.put(grammarAccess.getImportConfigAccess().getHeaderAssignment_4_0(), "rule__ImportConfig__HeaderAssignment_4_0");
			builder.put(grammarAccess.getImportConfigAccess().getHeaderValueAssignment_4_2(), "rule__ImportConfig__HeaderValueAssignment_4_2");
			builder.put(grammarAccess.getImportConfigAccess().getKeysAssignment_5_0(), "rule__ImportConfig__KeysAssignment_5_0");
			builder.put(grammarAccess.getImportConfigAccess().getHeaderValuesAssignment_5_3_0(), "rule__ImportConfig__HeaderValuesAssignment_5_3_0");
			builder.put(grammarAccess.getImportConfigAccess().getHeaderValuesAssignment_5_3_1_1(), "rule__ImportConfig__HeaderValuesAssignment_5_3_1_1");
			builder.put(grammarAccess.getImportConfigAccess().getDelimEnclosingAssignment_6_0(), "rule__ImportConfig__DelimEnclosingAssignment_6_0");
			builder.put(grammarAccess.getImportConfigAccess().getDelimEnclosingValueAssignment_6_2(), "rule__ImportConfig__DelimEnclosingValueAssignment_6_2");
			builder.put(grammarAccess.getImportConfigAccess().getDistinguishEmptyFromNullAssignment_7_0(), "rule__ImportConfig__DistinguishEmptyFromNullAssignment_7_0");
			builder.put(grammarAccess.getImportConfigAccess().getDistinguishEmptyFromNullValueAssignment_7_2(), "rule__ImportConfig__DistinguishEmptyFromNullValueAssignment_7_2");
			builder.put(grammarAccess.getImportConfigAccess().getUseHeaderNamesAssignment_8_0_0(), "rule__ImportConfig__UseHeaderNamesAssignment_8_0_0");
			builder.put(grammarAccess.getImportConfigAccess().getUseHeaderNamesValueAssignment_8_0_2(), "rule__ImportConfig__UseHeaderNamesValueAssignment_8_0_2");
			builder.put(grammarAccess.getImportAccess().getValuesAssignment_3_0(), "rule__Import__ValuesAssignment_3_0");
			builder.put(grammarAccess.getImportAccess().getValuesAssignment_3_1_1(), "rule__Import__ValuesAssignment_3_1_1");
			builder.put(grammarAccess.getImportConfigAccess().getUnorderedGroup(), "rule__ImportConfig__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HdbtiGrammarAccess grammarAccess;

	@Override
	protected InternalHdbtiParser createParser() {
		InternalHdbtiParser result = new InternalHdbtiParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HdbtiGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HdbtiGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
