/**
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbtable.hdbTable.impl;

import com.sap.xsk.models.hdbtable.hdbTable.HdbTablePackage;
import com.sap.xsk.models.hdbtable.hdbTable.IndexType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.IndexTypeImpl#getColumnName <em>Column Name</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.IndexTypeImpl#getColumnUnique <em>Column Unique</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.IndexTypeImpl#getColumnOrder <em>Column Order</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.IndexTypeImpl#isIndexColumns <em>Index Columns</em>}</li>
 *   <li>{@link com.sap.xsk.models.hdbtable.hdbTable.impl.IndexTypeImpl#getTableIndexColumnsValues <em>Table Index Columns Values</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexTypeImpl extends MinimalEObjectImpl.Container implements IndexType
{
  /**
   * The default value of the '{@link #getColumnName() <em>Column Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnName()
   * @generated
   * @ordered
   */
  protected static final String COLUMN_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColumnName() <em>Column Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnName()
   * @generated
   * @ordered
   */
  protected String columnName = COLUMN_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getColumnUnique() <em>Column Unique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnUnique()
   * @generated
   * @ordered
   */
  protected static final String COLUMN_UNIQUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColumnUnique() <em>Column Unique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnUnique()
   * @generated
   * @ordered
   */
  protected String columnUnique = COLUMN_UNIQUE_EDEFAULT;

  /**
   * The default value of the '{@link #getColumnOrder() <em>Column Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnOrder()
   * @generated
   * @ordered
   */
  protected static final String COLUMN_ORDER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColumnOrder() <em>Column Order</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnOrder()
   * @generated
   * @ordered
   */
  protected String columnOrder = COLUMN_ORDER_EDEFAULT;

  /**
   * The default value of the '{@link #isIndexColumns() <em>Index Columns</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIndexColumns()
   * @generated
   * @ordered
   */
  protected static final boolean INDEX_COLUMNS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIndexColumns() <em>Index Columns</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIndexColumns()
   * @generated
   * @ordered
   */
  protected boolean indexColumns = INDEX_COLUMNS_EDEFAULT;

  /**
   * The cached value of the '{@link #getTableIndexColumnsValues() <em>Table Index Columns Values</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTableIndexColumnsValues()
   * @generated
   * @ordered
   */
  protected EList<String> tableIndexColumnsValues;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HdbTablePackage.Literals.INDEX_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getColumnName()
  {
    return columnName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColumnName(String newColumnName)
  {
    String oldColumnName = columnName;
    columnName = newColumnName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.INDEX_TYPE__COLUMN_NAME, oldColumnName, columnName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getColumnUnique()
  {
    return columnUnique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColumnUnique(String newColumnUnique)
  {
    String oldColumnUnique = columnUnique;
    columnUnique = newColumnUnique;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.INDEX_TYPE__COLUMN_UNIQUE, oldColumnUnique, columnUnique));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getColumnOrder()
  {
    return columnOrder;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColumnOrder(String newColumnOrder)
  {
    String oldColumnOrder = columnOrder;
    columnOrder = newColumnOrder;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.INDEX_TYPE__COLUMN_ORDER, oldColumnOrder, columnOrder));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIndexColumns()
  {
    return indexColumns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndexColumns(boolean newIndexColumns)
  {
    boolean oldIndexColumns = indexColumns;
    indexColumns = newIndexColumns;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HdbTablePackage.INDEX_TYPE__INDEX_COLUMNS, oldIndexColumns, indexColumns));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getTableIndexColumnsValues()
  {
    if (tableIndexColumnsValues == null)
    {
      tableIndexColumnsValues = new EDataTypeEList<String>(String.class, this, HdbTablePackage.INDEX_TYPE__TABLE_INDEX_COLUMNS_VALUES);
    }
    return tableIndexColumnsValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HdbTablePackage.INDEX_TYPE__COLUMN_NAME:
        return getColumnName();
      case HdbTablePackage.INDEX_TYPE__COLUMN_UNIQUE:
        return getColumnUnique();
      case HdbTablePackage.INDEX_TYPE__COLUMN_ORDER:
        return getColumnOrder();
      case HdbTablePackage.INDEX_TYPE__INDEX_COLUMNS:
        return isIndexColumns();
      case HdbTablePackage.INDEX_TYPE__TABLE_INDEX_COLUMNS_VALUES:
        return getTableIndexColumnsValues();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HdbTablePackage.INDEX_TYPE__COLUMN_NAME:
        setColumnName((String)newValue);
        return;
      case HdbTablePackage.INDEX_TYPE__COLUMN_UNIQUE:
        setColumnUnique((String)newValue);
        return;
      case HdbTablePackage.INDEX_TYPE__COLUMN_ORDER:
        setColumnOrder((String)newValue);
        return;
      case HdbTablePackage.INDEX_TYPE__INDEX_COLUMNS:
        setIndexColumns((Boolean)newValue);
        return;
      case HdbTablePackage.INDEX_TYPE__TABLE_INDEX_COLUMNS_VALUES:
        getTableIndexColumnsValues().clear();
        getTableIndexColumnsValues().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HdbTablePackage.INDEX_TYPE__COLUMN_NAME:
        setColumnName(COLUMN_NAME_EDEFAULT);
        return;
      case HdbTablePackage.INDEX_TYPE__COLUMN_UNIQUE:
        setColumnUnique(COLUMN_UNIQUE_EDEFAULT);
        return;
      case HdbTablePackage.INDEX_TYPE__COLUMN_ORDER:
        setColumnOrder(COLUMN_ORDER_EDEFAULT);
        return;
      case HdbTablePackage.INDEX_TYPE__INDEX_COLUMNS:
        setIndexColumns(INDEX_COLUMNS_EDEFAULT);
        return;
      case HdbTablePackage.INDEX_TYPE__TABLE_INDEX_COLUMNS_VALUES:
        getTableIndexColumnsValues().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HdbTablePackage.INDEX_TYPE__COLUMN_NAME:
        return COLUMN_NAME_EDEFAULT == null ? columnName != null : !COLUMN_NAME_EDEFAULT.equals(columnName);
      case HdbTablePackage.INDEX_TYPE__COLUMN_UNIQUE:
        return COLUMN_UNIQUE_EDEFAULT == null ? columnUnique != null : !COLUMN_UNIQUE_EDEFAULT.equals(columnUnique);
      case HdbTablePackage.INDEX_TYPE__COLUMN_ORDER:
        return COLUMN_ORDER_EDEFAULT == null ? columnOrder != null : !COLUMN_ORDER_EDEFAULT.equals(columnOrder);
      case HdbTablePackage.INDEX_TYPE__INDEX_COLUMNS:
        return indexColumns != INDEX_COLUMNS_EDEFAULT;
      case HdbTablePackage.INDEX_TYPE__TABLE_INDEX_COLUMNS_VALUES:
        return tableIndexColumnsValues != null && !tableIndexColumnsValues.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (columnName: ");
    result.append(columnName);
    result.append(", columnUnique: ");
    result.append(columnUnique);
    result.append(", columnOrder: ");
    result.append(columnOrder);
    result.append(", indexColumns: ");
    result.append(indexColumns);
    result.append(", tableIndexColumnsValues: ");
    result.append(tableIndexColumnsValues);
    result.append(')');
    return result.toString();
  }

} //IndexTypeImpl
