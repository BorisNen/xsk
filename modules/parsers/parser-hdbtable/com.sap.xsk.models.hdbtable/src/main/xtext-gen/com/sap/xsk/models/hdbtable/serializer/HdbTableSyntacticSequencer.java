/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbtable.serializer;

import com.google.inject.Inject;
import com.sap.xsk.models.hdbtable.services.HdbTableGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class HdbTableSyntacticSequencer extends AbstractSyntacticSequencer {

	protected HdbTableGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__a;
	protected AbstractElementAlias match_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__p;
	protected AbstractElementAlias match_Table_SemicolonKeyword_5_1_a;
	protected AbstractElementAlias match_Table_SemicolonKeyword_5_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (HdbTableGrammarAccess) access;
		match_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getSemicolonKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getRightCurlyBracketKeyword_7_2()));
		match_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getSemicolonKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getColumnTypeAccess().getRightCurlyBracketKeyword_7_2()));
		match_Table_SemicolonKeyword_5_1_a = new TokenAlias(true, true, grammarAccess.getTableAccess().getSemicolonKeyword_5_1());
		match_Table_SemicolonKeyword_5_1_p = new TokenAlias(true, false, grammarAccess.getTableAccess().getSemicolonKeyword_5_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__a.equals(syntax))
				emit_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__p.equals(syntax))
				emit_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_SemicolonKeyword_5_1_a.equals(syntax))
				emit_Table_SemicolonKeyword_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_SemicolonKeyword_5_1_p.equals(syntax))
				emit_Table_SemicolonKeyword_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (';' '}')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'comment' '=' columnComment=STRING
	 *     (rule start) (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     (rule start) (ambiguity) 'length' '=' columnLength=INT
	 *     (rule start) (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     (rule start) (ambiguity) 'precision' '=' columnPrecision=INT
	 *     (rule start) (ambiguity) 'scale' '=' columnScale=INT
	 *     (rule start) (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     (rule start) (ambiguity) '{' 'name' '=' columnName=STRING
	 *     (rule start) (ambiguity) (rule start)
	 *     columnComment=STRING ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnComment=STRING ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnComment=STRING ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnComment=STRING ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnComment=STRING ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnComment=STRING ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnComment=STRING ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnComment=STRING ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnComment=STRING ';' (ambiguity) (rule end)
	 *     columnDefaultValue=STRING ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnDefaultValue=STRING ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnDefaultValue=STRING ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnDefaultValue=STRING ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnDefaultValue=STRING ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnDefaultValue=STRING ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnDefaultValue=STRING ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnDefaultValue=STRING ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnDefaultValue=STRING ';' (ambiguity) (rule end)
	 *     columnLength=INT ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnLength=INT ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnLength=INT ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnLength=INT ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnLength=INT ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnLength=INT ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnLength=INT ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnLength=INT ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnLength=INT ';' (ambiguity) (rule end)
	 *     columnName=STRING ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnName=STRING ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnName=STRING ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnName=STRING ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnName=STRING ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnName=STRING ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnName=STRING ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnName=STRING ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnName=STRING ';' (ambiguity) (rule end)
	 *     columnPrecision=INT ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnPrecision=INT ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnPrecision=INT ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnPrecision=INT ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnPrecision=INT ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnPrecision=INT ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnPrecision=INT ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnPrecision=INT ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnPrecision=INT ';' (ambiguity) (rule end)
	 *     columnScale=INT ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnScale=INT ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnScale=INT ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnScale=INT ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnScale=INT ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnScale=INT ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnScale=INT ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnScale=INT ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnScale=INT ';' (ambiguity) (rule end)
	 *     columnSqlType=ID ';' (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnSqlType=ID ';' (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnSqlType=ID ';' (ambiguity) 'length' '=' columnLength=INT
	 *     columnSqlType=ID ';' (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnSqlType=ID ';' (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnSqlType=ID ';' (ambiguity) 'scale' '=' columnScale=INT
	 *     columnSqlType=ID ';' (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnSqlType=ID ';' (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnSqlType=ID ';' (ambiguity) (rule end)
	 */
	protected void emit_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (';' '}')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     columnNullable=BOOL (ambiguity) 'comment' '=' columnComment=STRING
	 *     columnNullable=BOOL (ambiguity) 'defaultValue' '=' columnDefaultValue=STRING
	 *     columnNullable=BOOL (ambiguity) 'length' '=' columnLength=INT
	 *     columnNullable=BOOL (ambiguity) 'nullable' '=' columnNullable=BOOL
	 *     columnNullable=BOOL (ambiguity) 'precision' '=' columnPrecision=INT
	 *     columnNullable=BOOL (ambiguity) 'scale' '=' columnScale=INT
	 *     columnNullable=BOOL (ambiguity) 'sqlType' '=' columnSqlType=ID
	 *     columnNullable=BOOL (ambiguity) '{' 'name' '=' columnName=STRING
	 *     columnNullable=BOOL (ambiguity) (rule end)
	 */
	protected void emit_ColumnType___SemicolonKeyword_7_1_RightCurlyBracketKeyword_7_2__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) columns?='table.columns'
	 *     (rule start) (ambiguity) description?='table.description'
	 *     (rule start) (ambiguity) indexes?='table.indexes'
	 *     (rule start) (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     (rule start) (ambiguity) schema?='table.schemaName'
	 *     (rule start) (ambiguity) type?='table.tableType'
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) (rule end)
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) columns?='table.columns'
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) description?='table.description'
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) indexes?='table.indexes'
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) schema?='table.schemaName'
	 *     columns?='table.columns' '=' '[' ']' ';' (ambiguity) type?='table.tableType'
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) (rule end)
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) columns?='table.columns'
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) description?='table.description'
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) indexes?='table.indexes'
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) schema?='table.schemaName'
	 *     columnsValues+=ColumnType ']' ';' (ambiguity) type?='table.tableType'
	 *     descriptionText=STRING ';' (ambiguity) (rule end)
	 *     descriptionText=STRING ';' (ambiguity) columns?='table.columns'
	 *     descriptionText=STRING ';' (ambiguity) description?='table.description'
	 *     descriptionText=STRING ';' (ambiguity) indexes?='table.indexes'
	 *     descriptionText=STRING ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     descriptionText=STRING ';' (ambiguity) schema?='table.schemaName'
	 *     descriptionText=STRING ';' (ambiguity) type?='table.tableType'
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) (rule end)
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) columns?='table.columns'
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) description?='table.description'
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) indexes?='table.indexes'
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) schema?='table.schemaName'
	 *     indexes?='table.indexes' '=' '[' ']' ';' (ambiguity) type?='table.tableType'
	 *     indexesValues+=IndexType ']' ';' (ambiguity) (rule end)
	 *     indexesValues+=IndexType ']' ';' (ambiguity) columns?='table.columns'
	 *     indexesValues+=IndexType ']' ';' (ambiguity) description?='table.description'
	 *     indexesValues+=IndexType ']' ';' (ambiguity) indexes?='table.indexes'
	 *     indexesValues+=IndexType ']' ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     indexesValues+=IndexType ']' ';' (ambiguity) schema?='table.schemaName'
	 *     indexesValues+=IndexType ']' ';' (ambiguity) type?='table.tableType'
	 *     schemaName=STRING ';' (ambiguity) (rule end)
	 *     schemaName=STRING ';' (ambiguity) columns?='table.columns'
	 *     schemaName=STRING ';' (ambiguity) description?='table.description'
	 *     schemaName=STRING ';' (ambiguity) indexes?='table.indexes'
	 *     schemaName=STRING ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     schemaName=STRING ';' (ambiguity) schema?='table.schemaName'
	 *     schemaName=STRING ';' (ambiguity) type?='table.tableType'
	 *     typeValue=ID ';' (ambiguity) (rule end)
	 *     typeValue=ID ';' (ambiguity) columns?='table.columns'
	 *     typeValue=ID ';' (ambiguity) description?='table.description'
	 *     typeValue=ID ';' (ambiguity) indexes?='table.indexes'
	 *     typeValue=ID ';' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     typeValue=ID ';' (ambiguity) schema?='table.schemaName'
	 *     typeValue=ID ';' (ambiguity) type?='table.tableType'
	 */
	protected void emit_Table_SemicolonKeyword_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) (rule end)
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) columns?='table.columns'
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) description?='table.description'
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) indexes?='table.indexes'
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) schema?='table.schemaName'
	 *     primaryKeyColumns?='table.primaryKey.pkcolumns' '=' '[' ']' (ambiguity) type?='table.tableType'
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) (rule end)
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) columns?='table.columns'
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) description?='table.description'
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) indexes?='table.indexes'
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) primaryKeyColumns?='table.primaryKey.pkcolumns'
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) schema?='table.schemaName'
	 *     tablePrimaryKeyColumnsValues+=STRING ']' (ambiguity) type?='table.tableType'
	 */
	protected void emit_Table_SemicolonKeyword_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
