/*
 * Copyright (c) 2019-2020 SAP SE or an SAP affiliate company and XSK contributors
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, v2.0
 * which accompanies this distribution, and is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-FileCopyrightText: 2019-2020 SAP SE or an SAP affiliate company and XSK contributors
 * SPDX-License-Identifier: Apache-2.0
 */
/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbsequence.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.sap.xsk.models.hdbsequence.ide.contentassist.antlr.internal.InternalHdbSequenceParser;
import com.sap.xsk.models.hdbsequence.services.HdbSequenceGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class HdbSequenceParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HdbSequenceGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HdbSequenceGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getListStringAccess().getGroup(), "rule__ListString__Group__0");
			builder.put(grammarAccess.getListStringAccess().getGroup_1(), "rule__ListString__Group_1__0");
			builder.put(grammarAccess.getListStringAccess().getGroup_1_1(), "rule__ListString__Group_1_1__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_0(), "rule__HdbSequenceElements__Group_0__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_1(), "rule__HdbSequenceElements__Group_1__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_2(), "rule__HdbSequenceElements__Group_2__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_3(), "rule__HdbSequenceElements__Group_3__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_4(), "rule__HdbSequenceElements__Group_4__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_5(), "rule__HdbSequenceElements__Group_5__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_6(), "rule__HdbSequenceElements__Group_6__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_7(), "rule__HdbSequenceElements__Group_7__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_8(), "rule__HdbSequenceElements__Group_8__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_9(), "rule__HdbSequenceElements__Group_9__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_10(), "rule__HdbSequenceElements__Group_10__0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getGroup_11(), "rule__HdbSequenceElements__Group_11__0");
			builder.put(grammarAccess.getHdbSequenceModelAccess().getElementsAssignment(), "rule__HdbSequenceModel__ElementsAssignment");
			builder.put(grammarAccess.getListStringAccess().getValuesAssignment_1_0(), "rule__ListString__ValuesAssignment_1_0");
			builder.put(grammarAccess.getListStringAccess().getValuesAssignment_1_1_1(), "rule__ListString__ValuesAssignment_1_1_1");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getSchemaAssignment_0_0(), "rule__HdbSequenceElements__SchemaAssignment_0_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getSchemaValueAssignment_0_2(), "rule__HdbSequenceElements__SchemaValueAssignment_0_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getIncrementByAssignment_1_0(), "rule__HdbSequenceElements__IncrementByAssignment_1_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getIncrementByValueAssignment_1_2(), "rule__HdbSequenceElements__IncrementByValueAssignment_1_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getStartWithAssignment_2_0(), "rule__HdbSequenceElements__StartWithAssignment_2_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getStartWithValueAssignment_2_2(), "rule__HdbSequenceElements__StartWithValueAssignment_2_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getMaxValueAssignment_3_0(), "rule__HdbSequenceElements__MaxValueAssignment_3_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getMaxValueValueAssignment_3_2(), "rule__HdbSequenceElements__MaxValueValueAssignment_3_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getNoMaxValueAssignment_4_0(), "rule__HdbSequenceElements__NoMaxValueAssignment_4_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getNoMaxValueValueAssignment_4_2(), "rule__HdbSequenceElements__NoMaxValueValueAssignment_4_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getMinValueAssignment_5_0(), "rule__HdbSequenceElements__MinValueAssignment_5_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getMinVlaueValueAssignment_5_2(), "rule__HdbSequenceElements__MinVlaueValueAssignment_5_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getNoMinValueAssignment_6_0(), "rule__HdbSequenceElements__NoMinValueAssignment_6_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getNoMinValueValueAssignment_6_2(), "rule__HdbSequenceElements__NoMinValueValueAssignment_6_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getCyclesAssignment_7_0(), "rule__HdbSequenceElements__CyclesAssignment_7_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getCyclesValueAssignment_7_2(), "rule__HdbSequenceElements__CyclesValueAssignment_7_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getPublicAssignment_8_0(), "rule__HdbSequenceElements__PublicAssignment_8_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getPublicValueAssignment_8_2(), "rule__HdbSequenceElements__PublicValueAssignment_8_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getDependsOnTableAssignment_9_0(), "rule__HdbSequenceElements__DependsOnTableAssignment_9_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getDependsOnTableValueAssignment_9_2(), "rule__HdbSequenceElements__DependsOnTableValueAssignment_9_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getDependsOnViewAssignment_10_0(), "rule__HdbSequenceElements__DependsOnViewAssignment_10_0");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getDependsOnViewValueAssignment_10_2(), "rule__HdbSequenceElements__DependsOnViewValueAssignment_10_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getValueAssignment_11_2(), "rule__HdbSequenceElements__ValueAssignment_11_2");
			builder.put(grammarAccess.getHdbSequenceElementsAccess().getUnorderedGroup(), "rule__HdbSequenceElements__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HdbSequenceGrammarAccess grammarAccess;

	@Override
	protected InternalHdbSequenceParser createParser() {
		InternalHdbSequenceParser result = new InternalHdbSequenceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HdbSequenceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HdbSequenceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
