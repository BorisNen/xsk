/**
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbdd.hdbDD.impl;

import com.sap.xsk.models.hdbdd.hdbDD.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class HdbDDFactoryImpl extends EFactoryImpl implements HdbDDFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static HdbDDFactory init()
  {
    try
    {
      HdbDDFactory theHdbDDFactory = (HdbDDFactory)EPackage.Registry.INSTANCE.getEFactory(HdbDDPackage.eNS_URI);
      if (theHdbDDFactory != null)
      {
        return theHdbDDFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new HdbDDFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HdbDDFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case HdbDDPackage.HDB_DD: return createHdbDD();
      case HdbDDPackage.TYPE: return createType();
      case HdbDDPackage.NAMESPACE: return createNamespace();
      case HdbDDPackage.SCHEMA: return createSchema();
      case HdbDDPackage.CONTEXT: return createContext();
      case HdbDDPackage.TYPE_DEFINITION: return createTypeDefinition();
      case HdbDDPackage.ENTITY: return createEntity();
      case HdbDDPackage.FIELD: return createField();
      case HdbDDPackage.FIELD_PRIMITIVE: return createFieldPrimitive();
      case HdbDDPackage.FIELD_TYPE: return createFieldType();
      case HdbDDPackage.FIELD_REFERENCE: return createFieldReference();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HdbDD createHdbDD()
  {
    HdbDDImpl hdbDD = new HdbDDImpl();
    return hdbDD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Namespace createNamespace()
  {
    NamespaceImpl namespace = new NamespaceImpl();
    return namespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Schema createSchema()
  {
    SchemaImpl schema = new SchemaImpl();
    return schema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Context createContext()
  {
    ContextImpl context = new ContextImpl();
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDefinition createTypeDefinition()
  {
    TypeDefinitionImpl typeDefinition = new TypeDefinitionImpl();
    return typeDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FieldPrimitive createFieldPrimitive()
  {
    FieldPrimitiveImpl fieldPrimitive = new FieldPrimitiveImpl();
    return fieldPrimitive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FieldType createFieldType()
  {
    FieldTypeImpl fieldType = new FieldTypeImpl();
    return fieldType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FieldReference createFieldReference()
  {
    FieldReferenceImpl fieldReference = new FieldReferenceImpl();
    return fieldReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HdbDDPackage getHdbDDPackage()
  {
    return (HdbDDPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static HdbDDPackage getPackage()
  {
    return HdbDDPackage.eINSTANCE;
  }

} //HdbDDFactoryImpl
