/**
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbdd.hdbDD.util;

import com.sap.xsk.models.hdbdd.hdbDD.Context;
import com.sap.xsk.models.hdbdd.hdbDD.Entity;
import com.sap.xsk.models.hdbdd.hdbDD.Field;
import com.sap.xsk.models.hdbdd.hdbDD.FieldPrimitive;
import com.sap.xsk.models.hdbdd.hdbDD.FieldReference;
import com.sap.xsk.models.hdbdd.hdbDD.FieldType;
import com.sap.xsk.models.hdbdd.hdbDD.HdbDD;
import com.sap.xsk.models.hdbdd.hdbDD.HdbDDPackage;
import com.sap.xsk.models.hdbdd.hdbDD.Namespace;
import com.sap.xsk.models.hdbdd.hdbDD.Schema;
import com.sap.xsk.models.hdbdd.hdbDD.Type;
import com.sap.xsk.models.hdbdd.hdbDD.TypeDefinition;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 *
 * @generated
 * @see com.sap.xsk.models.hdbdd.hdbDD.HdbDDPackage
 */
public class HdbDDAdapterFactory extends AdapterFactoryImpl {

  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  protected static HdbDDPackage modelPackage;
  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  protected HdbDDSwitch<Adapter> modelSwitch =
      new HdbDDSwitch<Adapter>() {
        @Override
        public Adapter caseHdbDD(HdbDD object) {
          return createHdbDDAdapter();
        }

        @Override
        public Adapter caseType(Type object) {
          return createTypeAdapter();
        }

        @Override
        public Adapter caseNamespace(Namespace object) {
          return createNamespaceAdapter();
        }

        @Override
        public Adapter caseSchema(Schema object) {
          return createSchemaAdapter();
        }

        @Override
        public Adapter caseContext(Context object) {
          return createContextAdapter();
        }

        @Override
        public Adapter caseTypeDefinition(TypeDefinition object) {
          return createTypeDefinitionAdapter();
        }

        @Override
        public Adapter caseEntity(Entity object) {
          return createEntityAdapter();
        }

        @Override
        public Adapter caseField(Field object) {
          return createFieldAdapter();
        }

        @Override
        public Adapter caseFieldPrimitive(FieldPrimitive object) {
          return createFieldPrimitiveAdapter();
        }

        @Override
        public Adapter caseFieldType(FieldType object) {
          return createFieldTypeAdapter();
        }

        @Override
        public Adapter caseFieldReference(FieldReference object) {
          return createFieldReferenceAdapter();
        }

        @Override
        public Adapter defaultCase(EObject object) {
          return createEObjectAdapter();
        }
      };

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @generated
   */
  public HdbDDAdapterFactory() {
    if (modelPackage == null) {
      modelPackage = HdbDDPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   *
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object) {
    if (object == modelPackage) {
      return true;
    }
    if (object instanceof EObject) {
      return ((EObject) object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   *
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target) {
    return modelSwitch.doSwitch((EObject) target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.HdbDD <em>Hdb DD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.HdbDD
   */
  public Adapter createHdbDDAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.Type
   */
  public Adapter createTypeAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.Namespace <em>Namespace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.Namespace
   */
  public Adapter createNamespaceAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.Schema <em>Schema</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.Schema
   */
  public Adapter createSchemaAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.Context <em>Context</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.Context
   */
  public Adapter createContextAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.TypeDefinition <em>Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.TypeDefinition
   */
  public Adapter createTypeDefinitionAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.Entity
   */
  public Adapter createEntityAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.Field
   */
  public Adapter createFieldAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.FieldPrimitive <em>Field Primitive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.FieldPrimitive
   */
  public Adapter createFieldPrimitiveAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.FieldType <em>Field Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.FieldType
   */
  public Adapter createFieldTypeAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.sap.xsk.models.hdbdd.hdbDD.FieldReference <em>Field Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   * @see com.sap.xsk.models.hdbdd.hdbDD.FieldReference
   */
  public Adapter createFieldReferenceAdapter() {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   *
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter() {
    return null;
  }

} //HdbDDAdapterFactory
