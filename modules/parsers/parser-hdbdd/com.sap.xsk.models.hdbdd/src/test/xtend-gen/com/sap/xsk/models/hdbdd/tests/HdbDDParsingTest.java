/** generated by Xtext 2.18.0 */
package com.sap.xsk.models.hdbdd.tests;

import com.google.inject.Inject;
import com.sap.xsk.models.hdbdd.hdbDD.HdbDD;
import com.sap.xsk.models.hdbdd.tests.HdbDDInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(HdbDDInjectorProvider.class)
@SuppressWarnings("all")
public class HdbDDParsingTest {
  @Inject private ParseHelper<HdbDD> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("namespace product_project.db;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("@Schema: ADMIN");
      _builder.newLine();
      _builder.newLine();
      _builder.append("context Products {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("entity  Orders{");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("key Id               : String(32);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("CustomerName         : String(500);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("CustomerSurname      : String(500);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Status               : String(100);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("CreatedAt            : UTCTimestamp;");
      _builder.newLine();
      _builder.append("   \t\t");
      _builder.append("CreatedBy            : String(5000);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Description          : String(100);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Address              : String(5000);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Phone                : String(200);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Email                : String(300);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("items                : Association[*] to Item on items.OrderId = Id;");
      _builder.newLine();
      _builder.append("        ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("};");
      _builder.newLine();
      _builder.append("     ");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("entity Item {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("key ItemId          : String(32);");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("OrderId             : String(500);");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("Name                : String(500);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Type                : String(100);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Price               : String(100);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Currency            : String(100);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Quantity            : String(100);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Comment             : String(1000);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("};");
      _builder.newLine();
      _builder.append("    ");
      _builder.newLine();
      _builder.append("     ");
      _builder.newLine();
      _builder.append("     ");
      _builder.newLine();
      _builder.append("};");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      final HdbDD result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
