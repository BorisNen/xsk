/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbdd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.sap.xsk.models.hdbdd.ide.contentassist.antlr.internal.InternalModelParser;
import com.sap.xsk.models.hdbdd.services.ModelGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ModelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ModelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ModelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getFieldAccess().getAlternatives(), "rule__Field__Alternatives");
			builder.put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
			builder.put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
			builder.put(grammarAccess.getTypeDefinitionAccess().getGroup(), "rule__TypeDefinition__Group__0");
			builder.put(grammarAccess.getTypeDefinitionAccess().getGroup_4(), "rule__TypeDefinition__Group_4__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getGroup(), "rule__FieldPrimitive__Group__0");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getGroup_4(), "rule__FieldPrimitive__Group_4__0");
			builder.put(grammarAccess.getFieldTypeAccess().getGroup(), "rule__FieldType__Group__0");
			builder.put(grammarAccess.getFieldReferenceAccess().getGroup(), "rule__FieldReference__Group__0");
			builder.put(grammarAccess.getHdbDDAccess().getElementsAssignment(), "rule__HdbDD__ElementsAssignment");
			builder.put(grammarAccess.getNamespaceAccess().getNameAssignment_1(), "rule__Namespace__NameAssignment_1");
			builder.put(grammarAccess.getSchemaAccess().getNameAssignment_2(), "rule__Schema__NameAssignment_2");
			builder.put(grammarAccess.getContextAccess().getNameAssignment_1(), "rule__Context__NameAssignment_1");
			builder.put(grammarAccess.getContextAccess().getTypesAssignment_3(), "rule__Context__TypesAssignment_3");
			builder.put(grammarAccess.getContextAccess().getEntitiesAssignment_4(), "rule__Context__EntitiesAssignment_4");
			builder.put(grammarAccess.getTypeDefinitionAccess().getNameAssignment_1(), "rule__TypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getTypeDefinitionAccess().getFieldTypeAssignment_3(), "rule__TypeDefinition__FieldTypeAssignment_3");
			builder.put(grammarAccess.getTypeDefinitionAccess().getFieldLengthAssignment_4_1(), "rule__TypeDefinition__FieldLengthAssignment_4_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getFieldsAssignment_3(), "rule__Entity__FieldsAssignment_3");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getKeyAssignment_0(), "rule__FieldPrimitive__KeyAssignment_0");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getNameAssignment_1(), "rule__FieldPrimitive__NameAssignment_1");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getFieldTypeAssignment_3(), "rule__FieldPrimitive__FieldTypeAssignment_3");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getFieldLengthAssignment_4_1(), "rule__FieldPrimitive__FieldLengthAssignment_4_1");
			builder.put(grammarAccess.getFieldPrimitiveAccess().getFieldPredefinedTypeAssignment_5(), "rule__FieldPrimitive__FieldPredefinedTypeAssignment_5");
			builder.put(grammarAccess.getFieldTypeAccess().getKeyAssignment_0(), "rule__FieldType__KeyAssignment_0");
			builder.put(grammarAccess.getFieldTypeAccess().getNameAssignment_1(), "rule__FieldType__NameAssignment_1");
			builder.put(grammarAccess.getFieldTypeAccess().getFieldPredefinedTypeAssignment_3(), "rule__FieldType__FieldPredefinedTypeAssignment_3");
			builder.put(grammarAccess.getFieldReferenceAccess().getNameAssignment_0(), "rule__FieldReference__NameAssignment_0");
			builder.put(grammarAccess.getFieldReferenceAccess().getReferenceTypeAssignment_2(), "rule__FieldReference__ReferenceTypeAssignment_2");
			builder.put(grammarAccess.getFieldReferenceAccess().getFieldReferenceEntityAssignment_5(), "rule__FieldReference__FieldReferenceEntityAssignment_5");
			builder.put(grammarAccess.getFieldReferenceAccess().getFieldReferenceEntityLocalIdAssignment_7(), "rule__FieldReference__FieldReferenceEntityLocalIdAssignment_7");
			builder.put(grammarAccess.getFieldReferenceAccess().getFieldReferenceEntityForeignIdAssignment_9(), "rule__FieldReference__FieldReferenceEntityForeignIdAssignment_9");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ModelGrammarAccess grammarAccess;

	@Override
	protected InternalModelParser createParser() {
		InternalModelParser result = new InternalModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
