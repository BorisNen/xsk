/*
 * generated by Xtext 2.18.0
 */
package com.sap.xsk.models.hdbsequence.serializer;

import com.google.inject.Inject;
import com.sap.xsk.models.hdbsequence.hdbSequence.HdbSequenceElements;
import com.sap.xsk.models.hdbsequence.hdbSequence.HdbSequenceModel;
import com.sap.xsk.models.hdbsequence.hdbSequence.HdbSequencePackage;
import com.sap.xsk.models.hdbsequence.hdbSequence.ListString;
import com.sap.xsk.models.hdbsequence.services.HdbSequenceGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class HdbSequenceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HdbSequenceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HdbSequencePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HdbSequencePackage.HDB_SEQUENCE_ELEMENTS:
				sequence_HdbSequenceElements(context, (HdbSequenceElements) semanticObject); 
				return; 
			case HdbSequencePackage.HDB_SEQUENCE_MODEL:
				sequence_HdbSequenceModel(context, (HdbSequenceModel) semanticObject); 
				return; 
			case HdbSequencePackage.LIST_STRING:
				sequence_ListString(context, (ListString) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HdbSequenceElements returns HdbSequenceElements
	 *
	 * Constraint:
	 *     (
	 *         (schema='schema' schemaValue=STRING) | 
	 *         (incrementBy='increment_by' incrementByValue=INT) | 
	 *         (startWith='start_with' startWithValue=INT) | 
	 *         (maxValue='maxvalue' maxValueValue=INT) | 
	 *         (noMaxValue='nomaxvalue' noMaxValueValue=BOOL) | 
	 *         (minValue='minvalue' minVlaueValue=INT) | 
	 *         (noMinValue='nominvalue' noMinValueValue=BOOL) | 
	 *         (cycles='cycles' cyclesValue=BOOL) | 
	 *         (public='public' publicValue=BOOL) | 
	 *         (dependsOnTable='depends_on_table' dependsOnTableValue=STRING) | 
	 *         (dependsOnView='depends_on_view' dependsOnViewValue=STRING) | 
	 *         value=ListString
	 *     )+
	 */
	protected void sequence_HdbSequenceElements(ISerializationContext context, HdbSequenceElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HdbSequenceModel returns HdbSequenceModel
	 *
	 * Constraint:
	 *     elements+=HdbSequenceElements
	 */
	protected void sequence_HdbSequenceModel(ISerializationContext context, HdbSequenceModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListString returns ListString
	 *
	 * Constraint:
	 *     (values+=STRING values+=STRING*)
	 */
	protected void sequence_ListString(ISerializationContext context, ListString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
