{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project XSK Project XSK is a compatible environment for applications based on SAP HANA Extended Application Services (XS). You can deploy it separately from a SAP HANA instance as a Docker container on Kubernetes , on Cloud Foundry , or even locally in standalone mode. The compatibility stack is an extension of the Eclipse Dirigible cloud development platform. Try it Out","title":"Welcome"},{"location":"#project-xsk","text":"Project XSK is a compatible environment for applications based on SAP HANA Extended Application Services (XS). You can deploy it separately from a SAP HANA instance as a Docker container on Kubernetes , on Cloud Foundry , or even locally in standalone mode. The compatibility stack is an extension of the Eclipse Dirigible cloud development platform. Try it Out","title":"Project XSK"},{"location":"api/hdb/","text":"$.hdb $.hdb namespace provides means for seamless HANA database access. It is intended to be a replacement for the older $.db namespace. The fundamental goal of the new interface is to ensure simplicity, convenience, completeness, and performance. Overview Definition: https://github.com/SAP/xsk/issues/14 Module: hdb/hdb.js Status: alpha Sample Usage var db = $ . hdb ; let connection = null ; try { connection = db . getConnection (); try { connection . executeUpdate ( \"DROP TABLE CARS\" ); } catch ( e ) { // Do nothing } connection . executeUpdate ( \"CREATE TABLE CARS (MAKE varchar(255), MODEL varchar(255))\" ); let rows = connection . executeUpdate ( \"INSERT INTO CARS (MAKE, MODEL) VALUES ('BMW', '325')\" ); rows += connection . executeUpdate ( \"INSERT INTO CARS (MAKE, MODEL) VALUES ('HONDA', 'ACCORD')\" ); let totalText = `Query OK, ${ rows } rows affected\\n\\n` ; let result = connection . executeQuery ( \"SELECT * FROM CARS\" ); let iterator = result . getIterator (); let metadata = result . metadata . columns ; while ( iterator . next ()) { var currentRow = iterator . value (); totalText += ` ${ metadata [ 0 ]. name } : ${ currentRow [ 0 ] } , ${ metadata [ 1 ]. name } : ${ currentRow [ 1 ] } \\n` ; // totalText += `${metadata[0].name}: ${currentRow[metadata[0].name]}, ${metadata[1].name}: ${currentRow[metadata[1].name]}\\n`; } $ . response . setBody ( totalText ); } catch ( e ) { connection . rollback (); $ . response . setBody ( \"Transaction was rolled back: \" + e . message ); } finally { if ( connection ) { connection . close (); } } Functions Function Description Returns getConnection() Returns a connection to the database. $.hdb.Connection Properties Name Description Type Default isolation.READ_COMITTED - number 2 isolation.REPEATABLE_READ - number 4 isolation.SERIALIZABLE - number 8 types.TINYINT - number 1 types.SMALLINT - number 2 types.INTEGER - number 3 types.BIGINT - number 4 types.DECIMAL - number 5 types.REAL - number 6 types.DOUBLE - number 7 types.CHAR - number 8 types.VARCHAR - number 9 types.NCHAR - number 10 types.NVARCHAR - number 11 types.BINARY - number 12 types.VARBINARY - number 13 types.DATE - number 14 types.TIME - number 15 types.TIMESTAMP - number 16 types.CLOB - number 25 types.NCLOB - number 26 types.BLOB - number 27 types.SMALLDECIMAL - number 47 types.TEXT - number 51 types.SHORTTEXT - number 52 types.ALPHANUM - number 55 types.SECONDDATE - number 62 types.ST_GEOMETRY - number 74 types.ST_POINT - number 75 Note isolation - constants that represent the isolation levels for a transaction. types - set of constants of the database column types. types.ST_GEOMETRY - consider using SQL's ST_asGeoJSON() on ST_GEOMETRY columns for easy consumption. types.ST_POINT - consider using SQL's ST_asGeoJSON() on ST_POINT columns for easy consumption Classes $.hdb.Connection Functions Function Description Returns close() Closes the connection. - commit() Commits the changes. - isClosed() Checks if the connection is closed. boolean executeQuery(query, args) Executes a database query. $.hdb.ResultSet executeUpdate(statement, args) Executes a SQL statement, which changes the database state. $.hdb.ResultSet rollback() Rolls back the changes. - setAutoCommit(enable) Changes the auto-commit flag of the connection. - $.hdb.ResultSet Functions Function Description Returns getIterator() Returns an iterator over this result set. $.hdb.ResultSetIterator Properties Name Description Type lenght The number of rows in the $.hdb.ResultSet object number metadata Returns the ResultSetMetaData from $.hdb.ResultSet object. $.hdb.ResultSetMetaData $.hdb.ResultSetIterator Functions Method Description Type next() Checks if the result set has more rows and sets the value of the iterator to the next row if it exists. boolean value() Returns the current row that the iterator's value is set to, should always be called after a call to next() . row of a $.hdb.ResultSet $.hdb.ResultSetMetaData Properties Name Description Type column Returns an array of column metadata objects, each of which represents the metadata for a particular column. array of $.hdb.ColumnMetadata $.hdb. ColumnMetadata Properties Name Description Type catalogName Returns the column's catalog name. string displaySize Returns the column's display size. number isNullable Returns true if the column is nullable and false otherwise. number label Returns the column's label. string precision Returns the column's name. string scale Returns the column's scale. string tableName Returns the name of the table to which the column belongs. string type Returns the column's type. string typeName Returns the column's type name. $.hdb.types","title":"$.hdb"},{"location":"api/hdb/#hdb","text":"$.hdb namespace provides means for seamless HANA database access. It is intended to be a replacement for the older $.db namespace. The fundamental goal of the new interface is to ensure simplicity, convenience, completeness, and performance.","title":"$.hdb"},{"location":"api/hdb/#overview","text":"Definition: https://github.com/SAP/xsk/issues/14 Module: hdb/hdb.js Status: alpha","title":"Overview"},{"location":"api/hdb/#sample-usage","text":"var db = $ . hdb ; let connection = null ; try { connection = db . getConnection (); try { connection . executeUpdate ( \"DROP TABLE CARS\" ); } catch ( e ) { // Do nothing } connection . executeUpdate ( \"CREATE TABLE CARS (MAKE varchar(255), MODEL varchar(255))\" ); let rows = connection . executeUpdate ( \"INSERT INTO CARS (MAKE, MODEL) VALUES ('BMW', '325')\" ); rows += connection . executeUpdate ( \"INSERT INTO CARS (MAKE, MODEL) VALUES ('HONDA', 'ACCORD')\" ); let totalText = `Query OK, ${ rows } rows affected\\n\\n` ; let result = connection . executeQuery ( \"SELECT * FROM CARS\" ); let iterator = result . getIterator (); let metadata = result . metadata . columns ; while ( iterator . next ()) { var currentRow = iterator . value (); totalText += ` ${ metadata [ 0 ]. name } : ${ currentRow [ 0 ] } , ${ metadata [ 1 ]. name } : ${ currentRow [ 1 ] } \\n` ; // totalText += `${metadata[0].name}: ${currentRow[metadata[0].name]}, ${metadata[1].name}: ${currentRow[metadata[1].name]}\\n`; } $ . response . setBody ( totalText ); } catch ( e ) { connection . rollback (); $ . response . setBody ( \"Transaction was rolled back: \" + e . message ); } finally { if ( connection ) { connection . close (); } }","title":"Sample Usage"},{"location":"api/hdb/#functions","text":"Function Description Returns getConnection() Returns a connection to the database. $.hdb.Connection","title":"Functions"},{"location":"api/hdb/#properties","text":"Name Description Type Default isolation.READ_COMITTED - number 2 isolation.REPEATABLE_READ - number 4 isolation.SERIALIZABLE - number 8 types.TINYINT - number 1 types.SMALLINT - number 2 types.INTEGER - number 3 types.BIGINT - number 4 types.DECIMAL - number 5 types.REAL - number 6 types.DOUBLE - number 7 types.CHAR - number 8 types.VARCHAR - number 9 types.NCHAR - number 10 types.NVARCHAR - number 11 types.BINARY - number 12 types.VARBINARY - number 13 types.DATE - number 14 types.TIME - number 15 types.TIMESTAMP - number 16 types.CLOB - number 25 types.NCLOB - number 26 types.BLOB - number 27 types.SMALLDECIMAL - number 47 types.TEXT - number 51 types.SHORTTEXT - number 52 types.ALPHANUM - number 55 types.SECONDDATE - number 62 types.ST_GEOMETRY - number 74 types.ST_POINT - number 75 Note isolation - constants that represent the isolation levels for a transaction. types - set of constants of the database column types. types.ST_GEOMETRY - consider using SQL's ST_asGeoJSON() on ST_GEOMETRY columns for easy consumption. types.ST_POINT - consider using SQL's ST_asGeoJSON() on ST_POINT columns for easy consumption","title":"Properties"},{"location":"api/hdb/#classes","text":"","title":"Classes"},{"location":"api/hdb/#hdbconnection","text":"","title":"$.hdb.Connection"},{"location":"api/hdb/#functions_1","text":"Function Description Returns close() Closes the connection. - commit() Commits the changes. - isClosed() Checks if the connection is closed. boolean executeQuery(query, args) Executes a database query. $.hdb.ResultSet executeUpdate(statement, args) Executes a SQL statement, which changes the database state. $.hdb.ResultSet rollback() Rolls back the changes. - setAutoCommit(enable) Changes the auto-commit flag of the connection. -","title":"Functions"},{"location":"api/hdb/#hdbresultset","text":"","title":"$.hdb.ResultSet"},{"location":"api/hdb/#functions_2","text":"Function Description Returns getIterator() Returns an iterator over this result set. $.hdb.ResultSetIterator","title":"Functions"},{"location":"api/hdb/#properties_1","text":"Name Description Type lenght The number of rows in the $.hdb.ResultSet object number metadata Returns the ResultSetMetaData from $.hdb.ResultSet object. $.hdb.ResultSetMetaData","title":"Properties"},{"location":"api/hdb/#hdbresultsetiterator","text":"","title":"$.hdb.ResultSetIterator"},{"location":"api/hdb/#functions_3","text":"Method Description Type next() Checks if the result set has more rows and sets the value of the iterator to the next row if it exists. boolean value() Returns the current row that the iterator's value is set to, should always be called after a call to next() . row of a $.hdb.ResultSet","title":"Functions"},{"location":"api/hdb/#hdbresultsetmetadata","text":"","title":"$.hdb.ResultSetMetaData"},{"location":"api/hdb/#properties_2","text":"Name Description Type column Returns an array of column metadata objects, each of which represents the metadata for a particular column. array of $.hdb.ColumnMetadata","title":"Properties"},{"location":"api/hdb/#hdb-columnmetadata","text":"","title":"$.hdb. ColumnMetadata"},{"location":"api/hdb/#properties_3","text":"Name Description Type catalogName Returns the column's catalog name. string displaySize Returns the column's display size. number isNullable Returns true if the column is nullable and false otherwise. number label Returns the column's label. string precision Returns the column's name. string scale Returns the column's scale. string tableName Returns the name of the table to which the column belongs. string type Returns the column's type. string typeName Returns the column's type name. $.hdb.types","title":"Properties"},{"location":"api/import/","text":"$.import $.import namespace provides means for importing server-side JavaScript library artifacts. These are design-time artifacts located in the repository. JavaScript library design-time artifacts have the suffix *.xsjslib . Overview Definition: https://github.com/SAP/xsk/issues/18 Module: import/import.js Status: alpha Sample Usage Note If you want to use sample usage code, file structure of project in your workspace browser should look like this: import.xsjs // Import .xsjslib to our file using $.import api (\"package\",\"library\") // In our case package equals to \"sap.myapp.lib\" let mathlib = $ . import ( \"sap.myapp.lib\" , \"math\" ); let square = mathlib . square ( 6 ); let multiply = mathlib . multiply ( 4 , 9 ); let division = mathlib . division ( 9 , 3 ); let result = `Square is: ${ square } ` ; result += `\\nMultiply is: ${ multiply } ` ; result += `\\nDivision is: ${ division } ` ; $ . response . setBody ( result ); math.xsjslib function square ( x ) { return x * x ; } function multiply ( x , y ) { return x * y ; } function division ( x , y ) { return x / y ; } Parameters Name type Description package string The name of the package in which the library object is located library string The name of the library object in the repository (without the suffix .xsjslib)","title":"$.import"},{"location":"api/import/#import","text":"$.import namespace provides means for importing server-side JavaScript library artifacts. These are design-time artifacts located in the repository. JavaScript library design-time artifacts have the suffix *.xsjslib .","title":"$.import"},{"location":"api/import/#overview","text":"Definition: https://github.com/SAP/xsk/issues/18 Module: import/import.js Status: alpha","title":"Overview"},{"location":"api/import/#sample-usage","text":"Note If you want to use sample usage code, file structure of project in your workspace browser should look like this: import.xsjs // Import .xsjslib to our file using $.import api (\"package\",\"library\") // In our case package equals to \"sap.myapp.lib\" let mathlib = $ . import ( \"sap.myapp.lib\" , \"math\" ); let square = mathlib . square ( 6 ); let multiply = mathlib . multiply ( 4 , 9 ); let division = mathlib . division ( 9 , 3 ); let result = `Square is: ${ square } ` ; result += `\\nMultiply is: ${ multiply } ` ; result += `\\nDivision is: ${ division } ` ; $ . response . setBody ( result ); math.xsjslib function square ( x ) { return x * x ; } function multiply ( x , y ) { return x * y ; } function division ( x , y ) { return x / y ; }","title":"Sample Usage"},{"location":"api/import/#parameters","text":"Name type Description package string The name of the package in which the library object is located library string The name of the library object in the repository (without the suffix .xsjslib)","title":"Parameters"},{"location":"api/net.Destination/","text":"$.net.Destination $.net.Destination class returns the network destination with the given name. A network destination contains metadata (e.g., host name or port number). The network destination can also contain custom properties. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha Sample Usage let net = $ . net ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=http://localhost; port=8080; */ let dest = new net . Destination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Port: \" + dest . port ); Constructors new $ . net . Destination ( package , objectName ) Throws an error if no valid network destination is found with the given name. Parameters Parameter Name Description Required Type package The package where the destination is located. required String objectName The name of the destination file. required String Properties Name Description Type host Property used to retrieve the host defined in a network destination. String port Property used to retrieve the port defined in a network destination. String","title":"$.net.Destination"},{"location":"api/net.Destination/#netdestination","text":"$.net.Destination class returns the network destination with the given name. A network destination contains metadata (e.g., host name or port number). The network destination can also contain custom properties.","title":"$.net.Destination"},{"location":"api/net.Destination/#overview","text":"Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha","title":"Overview"},{"location":"api/net.Destination/#sample-usage","text":"let net = $ . net ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=http://localhost; port=8080; */ let dest = new net . Destination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Port: \" + dest . port );","title":"Sample Usage"},{"location":"api/net.Destination/#constructors","text":"new $ . net . Destination ( package , objectName ) Throws an error if no valid network destination is found with the given name.","title":"Constructors"},{"location":"api/net.Destination/#parameters","text":"Parameter Name Description Required Type package The package where the destination is located. required String objectName The name of the destination file. required String","title":"Parameters"},{"location":"api/net.Destination/#properties","text":"Name Description Type host Property used to retrieve the host defined in a network destination. String port Property used to retrieve the port defined in a network destination. String","title":"Properties"},{"location":"api/net.Mail.Part/","text":"$.net.Mail.Part $.net.Mail.Part class for constructing email parts. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha Sample Usage // Create an inline $.net.Mail.Part from JSObject. var firstPart = new $ . net . Mail . Part (); firstPart . type = $ . net . Mail . Part . TYPE_INLINE ; firstPart . data = data1 ; // data1 contains the binary data of the image firstPart . contentType = \"image/jpg\" ; firstPart . contentId = \"IMAGE1_ID\" ; firstPart . fileName = \"fileName1.jpg\" ; firstPart . fileNameEncoding = \"UTF-8\" ; // Create an attachment $.net.Mail.Part from JSObject. var secondPart = new $ . net . Mail . Part ({ type : $ . net . Mail . Part . TYPE_ATTACHMENT , data : data2 , // data2 contains the binary data of the image contentType : \"image/jpg\" , fileName : \"fileName2.jpg\" , fileNameEncoding : \"UTF-8\" }); // Create a text $.net.Mail.Part object. var thirdPart = new $ . net . Mail . Part (); thirdPart . type = $ . net . Mail . Part . TYPE_TEXT ; thirdPart . text = \"<html><head></head><body><img src=\\\"cid:IMAGE1_ID\\\"></body></html>\" ; thirdPart . contentType = \"text/html\" ; thirdPart . alternative = \"The alternative of the text\" ; thirdPart . alternativeContentType = \"text/plain\" ; thirdPart . encoding = \"UTF-8\" ; // Create an $.net.Mail object. var mail = new $ . net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"to1\" , address : \"to1@sap.com\" }, { name : \"to2\" , address : \"to2@sap.com\" }], cc : [{ name : \"cc1\" , address : \"cc1@sap.com\" }, { name : \"cc2\" , address : \"cc2@sap.com\" }], bcc : [{ name : \"bcc1\" , address : \"bcc1@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" }); mail . parts . push ( firstPart , secondPart , thirdPart ); mail . send (); Constructors new $ . net . Mail . Part ( PartObject ) Parameters Parameter Name Description Required Type PartObject JS object containing elements of a Part in JSON format. optional object Properties Name Description Type alternative Property used for initializing \"alternative\" property of the text $.net.Mail.Part object. string alternativeContentType Property used for initializing \"alternativeContentType\" property of the text $.net.Mail.Part object. If this property is not set, the default value is \"text/plain\". string contentId Property used for initializing \"contentId\" property of the inline $.net.Mail.Part object. string contentType Property used for initializing \"contentType\" property of the $.net.Mail.Part object. string data Property used for initializing \"data\" property of the attachment and inline $.net.Mail.Part object. string/ArrayBuffer encoding Property used for initializing \"encoding\" property of the text $.net.Mail.Part object. It also applies to alternative text. If this property is not set, the default value is \"UTF-8\". string fileName Property used for initializing \"fileName\" property of the attachment and inline $.net.Mail.Part object. It contains the full name of the file with the extension, example \"file.txt\". string fileNameEncoding Property used for initializing \"fileNameEncoding\" property of the attachment and inline $.net.Mail.Part object. It is the encoding of the filename. If this property is not set, the default value is \"UTF-8\". string text Property used for initializing \"text\" property of the text $.net.Mail.Part object. string type Property used for initializing \"type\" property of the $.net.Mail.Part object. If this property is not set, the part will not be set. It should be one of the following: $.net.Mail.Part.TYPE_TEXT $.net.Mail.Part.TYPE_ATTACHMENT $.net.Mail.Part.TYPE_INLINE string","title":"$.net.Mail.Part"},{"location":"api/net.Mail.Part/#netmailpart","text":"$.net.Mail.Part class for constructing email parts.","title":"$.net.Mail.Part"},{"location":"api/net.Mail.Part/#overview","text":"Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha","title":"Overview"},{"location":"api/net.Mail.Part/#sample-usage","text":"// Create an inline $.net.Mail.Part from JSObject. var firstPart = new $ . net . Mail . Part (); firstPart . type = $ . net . Mail . Part . TYPE_INLINE ; firstPart . data = data1 ; // data1 contains the binary data of the image firstPart . contentType = \"image/jpg\" ; firstPart . contentId = \"IMAGE1_ID\" ; firstPart . fileName = \"fileName1.jpg\" ; firstPart . fileNameEncoding = \"UTF-8\" ; // Create an attachment $.net.Mail.Part from JSObject. var secondPart = new $ . net . Mail . Part ({ type : $ . net . Mail . Part . TYPE_ATTACHMENT , data : data2 , // data2 contains the binary data of the image contentType : \"image/jpg\" , fileName : \"fileName2.jpg\" , fileNameEncoding : \"UTF-8\" }); // Create a text $.net.Mail.Part object. var thirdPart = new $ . net . Mail . Part (); thirdPart . type = $ . net . Mail . Part . TYPE_TEXT ; thirdPart . text = \"<html><head></head><body><img src=\\\"cid:IMAGE1_ID\\\"></body></html>\" ; thirdPart . contentType = \"text/html\" ; thirdPart . alternative = \"The alternative of the text\" ; thirdPart . alternativeContentType = \"text/plain\" ; thirdPart . encoding = \"UTF-8\" ; // Create an $.net.Mail object. var mail = new $ . net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"to1\" , address : \"to1@sap.com\" }, { name : \"to2\" , address : \"to2@sap.com\" }], cc : [{ name : \"cc1\" , address : \"cc1@sap.com\" }, { name : \"cc2\" , address : \"cc2@sap.com\" }], bcc : [{ name : \"bcc1\" , address : \"bcc1@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" }); mail . parts . push ( firstPart , secondPart , thirdPart ); mail . send ();","title":"Sample Usage"},{"location":"api/net.Mail.Part/#constructors","text":"new $ . net . Mail . Part ( PartObject )","title":"Constructors"},{"location":"api/net.Mail.Part/#parameters","text":"Parameter Name Description Required Type PartObject JS object containing elements of a Part in JSON format. optional object","title":"Parameters"},{"location":"api/net.Mail.Part/#properties","text":"Name Description Type alternative Property used for initializing \"alternative\" property of the text $.net.Mail.Part object. string alternativeContentType Property used for initializing \"alternativeContentType\" property of the text $.net.Mail.Part object. If this property is not set, the default value is \"text/plain\". string contentId Property used for initializing \"contentId\" property of the inline $.net.Mail.Part object. string contentType Property used for initializing \"contentType\" property of the $.net.Mail.Part object. string data Property used for initializing \"data\" property of the attachment and inline $.net.Mail.Part object. string/ArrayBuffer encoding Property used for initializing \"encoding\" property of the text $.net.Mail.Part object. It also applies to alternative text. If this property is not set, the default value is \"UTF-8\". string fileName Property used for initializing \"fileName\" property of the attachment and inline $.net.Mail.Part object. It contains the full name of the file with the extension, example \"file.txt\". string fileNameEncoding Property used for initializing \"fileNameEncoding\" property of the attachment and inline $.net.Mail.Part object. It is the encoding of the filename. If this property is not set, the default value is \"UTF-8\". string text Property used for initializing \"text\" property of the text $.net.Mail.Part object. string type Property used for initializing \"type\" property of the $.net.Mail.Part object. If this property is not set, the part will not be set. It should be one of the following: $.net.Mail.Part.TYPE_TEXT $.net.Mail.Part.TYPE_ATTACHMENT $.net.Mail.Part.TYPE_INLINE string","title":"Properties"},{"location":"api/net.Mail/","text":"$.net.Mail $.net.Mail class for constructing and sending multi-part emails. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha Sample Usage //create empty $.net.Mail var mail = new $ . net . Mail (); let net = $ . net ; let response = require ( 'http/v4/response' ); //create email from JS Object and send let mail = new $ . net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new $ . net . Mail . Part ({ type : $ . net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); //return value is mocked as send is now a void method let returnValue = mail . send (); let response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; response . println ( response_msg ); let net = $ . net ; var response = require ( 'http/v4/response' ); var mail = new net . Mail (); mail . subject = \"About what the email is.\" mail . subjectEncoding = \"UTF-8\" ; mail . sender = { address : \"from@sap.com\" }; mail . to . push ({ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }); mail . cc = [{ name : \"Cc1\" , address : \"cc1@recepient.com\" }, { address : \"cc2@recepient.com\" }]; mail . parts . push ( new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : 'Text' })); var returnValue ; var response = \"\" ; try { //the return value is mocked as send is now a void method returnValue = mail . send (); } catch ( error ) { response = \"Error occurred:\" + error . message ; } response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; response . println ( response_msg ); Constructors new $ . net . Mail ( MailObject ) Parameters Parameter Name Description Required Type MailObject JS object containing different part of the email in JSON format. Supported properties are {'sender', 'to', 'cc', 'bcc', 'subject', 'subjectEncoding', 'parts'}. optional object Classes Classes Description Part Class for constructing email parts. Properties Name Description Type bcc Property used for initializing \"bcc\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. array cc Property used for initializing \"cc\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. array parts Property used for initializing \"parts\" property of the mail. It is an array containing $.net.Mail.Part() objects. array sender Property used for initializing \"sender\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. This property is required or the mail won't be sent. object subject Property used for initializing \"subject\" property of the mail. string subjectEncoding Property used for initializing \"subjectEncoding\" property of the mail. It is the encoding of the subject. If this property is not set, the default value is \"UTF-8\". string to Property used for initializing \"to\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. array Functions Function Description Returns send() Void method that returns a mocked object containing two properties: 'messageId' and 'finalReply' for compatibility reasons. object","title":"$.net.Mail"},{"location":"api/net.Mail/#netmail","text":"$.net.Mail class for constructing and sending multi-part emails.","title":"$.net.Mail"},{"location":"api/net.Mail/#overview","text":"Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha","title":"Overview"},{"location":"api/net.Mail/#sample-usage","text":"//create empty $.net.Mail var mail = new $ . net . Mail (); let net = $ . net ; let response = require ( 'http/v4/response' ); //create email from JS Object and send let mail = new $ . net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new $ . net . Mail . Part ({ type : $ . net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); //return value is mocked as send is now a void method let returnValue = mail . send (); let response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; response . println ( response_msg ); let net = $ . net ; var response = require ( 'http/v4/response' ); var mail = new net . Mail (); mail . subject = \"About what the email is.\" mail . subjectEncoding = \"UTF-8\" ; mail . sender = { address : \"from@sap.com\" }; mail . to . push ({ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }); mail . cc = [{ name : \"Cc1\" , address : \"cc1@recepient.com\" }, { address : \"cc2@recepient.com\" }]; mail . parts . push ( new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : 'Text' })); var returnValue ; var response = \"\" ; try { //the return value is mocked as send is now a void method returnValue = mail . send (); } catch ( error ) { response = \"Error occurred:\" + error . message ; } response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; response . println ( response_msg );","title":"Sample Usage"},{"location":"api/net.Mail/#constructors","text":"new $ . net . Mail ( MailObject )","title":"Constructors"},{"location":"api/net.Mail/#parameters","text":"Parameter Name Description Required Type MailObject JS object containing different part of the email in JSON format. Supported properties are {'sender', 'to', 'cc', 'bcc', 'subject', 'subjectEncoding', 'parts'}. optional object","title":"Parameters"},{"location":"api/net.Mail/#classes","text":"Classes Description Part Class for constructing email parts.","title":"Classes"},{"location":"api/net.Mail/#properties","text":"Name Description Type bcc Property used for initializing \"bcc\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. array cc Property used for initializing \"cc\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. array parts Property used for initializing \"parts\" property of the mail. It is an array containing $.net.Mail.Part() objects. array sender Property used for initializing \"sender\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. This property is required or the mail won't be sent. object subject Property used for initializing \"subject\" property of the mail. string subjectEncoding Property used for initializing \"subjectEncoding\" property of the mail. It is the encoding of the subject. If this property is not set, the default value is \"UTF-8\". string to Property used for initializing \"to\" property of the mail. It is an array containing objects with three properties - name, encoding and address with address being required. array","title":"Properties"},{"location":"api/net.Mail/#functions","text":"Function Description Returns send() Void method that returns a mocked object containing two properties: 'messageId' and 'finalReply' for compatibility reasons. object","title":"Functions"},{"location":"api/net.SMTPConnection/","text":"$.net.SMTPConnection $.net.SMTPConnection class for sending $.net.Mail objects via SMTP connection. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha Sample Usage var net = $ . net var response = require ( 'http/v4/response' ); //create email from JS Object and send var mail = new net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); var smtp = new net . SMTPConnection (); smtp . send ( mail ); Functions Function Description Returns close() Mocked. The SMTP Connection is now automatically closed after calling the send method. void isClosed() Mocked. The SMTP Connection is always closed. boolean send(Mail) Accepts and sends the net.Mail class. void","title":"$.net.SMTPConnection"},{"location":"api/net.SMTPConnection/#netsmtpconnection","text":"$.net.SMTPConnection class for sending $.net.Mail objects via SMTP connection.","title":"$.net.SMTPConnection"},{"location":"api/net.SMTPConnection/#overview","text":"Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha","title":"Overview"},{"location":"api/net.SMTPConnection/#sample-usage","text":"var net = $ . net var response = require ( 'http/v4/response' ); //create email from JS Object and send var mail = new net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); var smtp = new net . SMTPConnection (); smtp . send ( mail );","title":"Sample Usage"},{"location":"api/net.SMTPConnection/#functions","text":"Function Description Returns close() Mocked. The SMTP Connection is now automatically closed after calling the send method. void isClosed() Mocked. The SMTP Connection is always closed. boolean send(Mail) Accepts and sends the net.Mail class. void","title":"Functions"},{"location":"api/net.http.Client/","text":"$.net.http.Client HTTP(s) client for outbound connectivity. This client supports HTTP and HTTPS connections over HTTP or SOCKS proxy. You can either use a destination (preferred way) or a URL as target. To use HTTPS you need to specify a trust store with the needed certificates (either in the destination or with setTrustStore ). To choose between HTTP and SOCKS proxy, the proxy URL starts with either http:// or socks:// . This HttpClient is equipped with a cookie database. If a previous response sent a set-cookie header, the cookie is stored for the relevant domain and path. Subsequent requests will be enriched with the stored cookies automatically. Overview Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha Sample Usage let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // create client let client = new http . Client (); let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // set the timeout in seconds client . setTimeout ( 10 ); // send the request and synchronously get the response client . request ( request , dest ); let response = client . getResponse (); // get all the cookies and headers from the response let co = [], he = []; for ( let c in response . cookies ) { co . push ( response . cookies [ c ]); } for ( let c in response . headers ) { he . push ( response . headers [ c ]); } // get the body let body ; if ( ! response . body ) body = \"\" ; else body = response . body ; // check the contents of the response response_prev . println ( \"status: \" + response . status + \" cookies: \" + co + \" headers: \" + he + \" body: \" + body ); Functions Function Description Returns close() Close the connection. It is done automatically inside the HttpClientFacade. No need to call it explicitly! void getResponse() Retrieve the response from the previously sent request synchronously/blocking. Throws an error if there is no valid response to return $.web.WebResponse request($.net.http.Request, $.net.http.Destination) Send a new request object to the given destination. Throws an error if the request fails or the parameters are invalid. void request($.net.http.Request, url, proxy (optional)) Send a request object to the given URL. Throws an error if the request fails or the parameters are invalid. void request(WebMethod ($.net.http), url, proxy (optional)) Send a new request to the given URL, using the specified HTTP method. Throws an error if the request fails or the parameters are invalid. void setTimeout(timeout) Sets the timeout for communication with the server. Throws an error if the parameter is not a numeric value. void setTrustStore(trustStore) Sets the default trust store the will be used when issuing https:// requests via request(request, URI, ...)-syntax. void","title":"$.net.http.Client"},{"location":"api/net.http.Client/#nethttpclient","text":"HTTP(s) client for outbound connectivity. This client supports HTTP and HTTPS connections over HTTP or SOCKS proxy. You can either use a destination (preferred way) or a URL as target. To use HTTPS you need to specify a trust store with the needed certificates (either in the destination or with setTrustStore ). To choose between HTTP and SOCKS proxy, the proxy URL starts with either http:// or socks:// . This HttpClient is equipped with a cookie database. If a previous response sent a set-cookie header, the cookie is stored for the relevant domain and path. Subsequent requests will be enriched with the stored cookies automatically.","title":"$.net.http.Client"},{"location":"api/net.http.Client/#overview","text":"Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha","title":"Overview"},{"location":"api/net.http.Client/#sample-usage","text":"let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // create client let client = new http . Client (); let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // set the timeout in seconds client . setTimeout ( 10 ); // send the request and synchronously get the response client . request ( request , dest ); let response = client . getResponse (); // get all the cookies and headers from the response let co = [], he = []; for ( let c in response . cookies ) { co . push ( response . cookies [ c ]); } for ( let c in response . headers ) { he . push ( response . headers [ c ]); } // get the body let body ; if ( ! response . body ) body = \"\" ; else body = response . body ; // check the contents of the response response_prev . println ( \"status: \" + response . status + \" cookies: \" + co + \" headers: \" + he + \" body: \" + body );","title":"Sample Usage"},{"location":"api/net.http.Client/#functions","text":"Function Description Returns close() Close the connection. It is done automatically inside the HttpClientFacade. No need to call it explicitly! void getResponse() Retrieve the response from the previously sent request synchronously/blocking. Throws an error if there is no valid response to return $.web.WebResponse request($.net.http.Request, $.net.http.Destination) Send a new request object to the given destination. Throws an error if the request fails or the parameters are invalid. void request($.net.http.Request, url, proxy (optional)) Send a request object to the given URL. Throws an error if the request fails or the parameters are invalid. void request(WebMethod ($.net.http), url, proxy (optional)) Send a new request to the given URL, using the specified HTTP method. Throws an error if the request fails or the parameters are invalid. void setTimeout(timeout) Sets the timeout for communication with the server. Throws an error if the parameter is not a numeric value. void setTrustStore(trustStore) Sets the default trust store the will be used when issuing https:// requests via request(request, URI, ...)-syntax. void","title":"Functions"},{"location":"api/net.http.Destination/","text":"$.net.http.Destination HTTP(s) destination class that holds metadata (e.g., host, port, useSSL). The destination can be retrieved from the database with $.net.http.readDestination . Overview Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha Sample Usage let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Path Prefix: \" + dest . pathPrefix );","title":"$.net.http.Destination"},{"location":"api/net.http.Destination/#nethttpdestination","text":"HTTP(s) destination class that holds metadata (e.g., host, port, useSSL). The destination can be retrieved from the database with $.net.http.readDestination .","title":"$.net.http.Destination"},{"location":"api/net.http.Destination/#overview","text":"Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha","title":"Overview"},{"location":"api/net.http.Destination/#sample-usage","text":"let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Path Prefix: \" + dest . pathPrefix );","title":"Sample Usage"},{"location":"api/net.http.Request/","text":"$.net.http.Request $.net.http.Request class to be used with HTTP client. It extends $.web.WebRequest . Overview Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha Sample Usage let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); let dest = http . readDestination ( \"Demo\" , \"service\" ); // create client let client = new http . Client (); // create Request class with the HTTP method constants as a first argument and the path of the resource as a second let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // Use the Request class to send an http request with the net.http.Client class client . request ( request , dest ); Properties Name Description Type body The body of the request. The value is undefined when there is no body. Only available on $.request. $.web.Body contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList language Readonly. Language of the request in IETF (BCP 47) format. This property contains the language that is used for the request. Application code should rely on this property only. The value is a string in the format specified by the IETF (BCP 47) standard. Inherited From: $.web.WebRequest#language string method The HTTP method of the incoming HTTP request. Inherited From: $.web.WebRequest#method $.net.http parameters The parameters of the entity. $.web.TupelList path Readonly. The URL path specified in the request. string queryPath The URL query path specified in the request. Inherited From: $.web.WebRequest#queryPath string Functions Function Description Returns setBody(body, index(optional)) Sets the body of the entity; the method supports all elemental JavaScript types and ArrayBuffers as a body and numbers as an index. Throws an error if the parameters are invalid. void","title":"$.net.http.Request"},{"location":"api/net.http.Request/#nethttprequest","text":"$.net.http.Request class to be used with HTTP client. It extends $.web.WebRequest .","title":"$.net.http.Request"},{"location":"api/net.http.Request/#overview","text":"Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha","title":"Overview"},{"location":"api/net.http.Request/#sample-usage","text":"let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); let dest = http . readDestination ( \"Demo\" , \"service\" ); // create client let client = new http . Client (); // create Request class with the HTTP method constants as a first argument and the path of the resource as a second let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // Use the Request class to send an http request with the net.http.Client class client . request ( request , dest );","title":"Sample Usage"},{"location":"api/net.http.Request/#properties","text":"Name Description Type body The body of the request. The value is undefined when there is no body. Only available on $.request. $.web.Body contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList language Readonly. Language of the request in IETF (BCP 47) format. This property contains the language that is used for the request. Application code should rely on this property only. The value is a string in the format specified by the IETF (BCP 47) standard. Inherited From: $.web.WebRequest#language string method The HTTP method of the incoming HTTP request. Inherited From: $.web.WebRequest#method $.net.http parameters The parameters of the entity. $.web.TupelList path Readonly. The URL path specified in the request. string queryPath The URL query path specified in the request. Inherited From: $.web.WebRequest#queryPath string","title":"Properties"},{"location":"api/net.http.Request/#functions","text":"Function Description Returns setBody(body, index(optional)) Sets the body of the entity; the method supports all elemental JavaScript types and ArrayBuffers as a body and numbers as an index. Throws an error if the parameters are invalid. void","title":"Functions"},{"location":"api/net.http/","text":"$.net.http $.net.http represents the http namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha Sample Usage let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Path Prefix: \" + dest . pathPrefix ); // create client let client = new http . Client (); let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // set the timeout in seconds client . setTimeout ( 10 ); // send the request and synchronously get the response client . request ( request , dest ); let response = client . getResponse (); // get all the cookies and headers from the response let co = [], he = []; for ( let c in response . cookies ) { co . push ( response . cookies [ c ]); } for ( let c in response . headers ) { he . push ( response . headers [ c ]); } // get the body let body ; if ( ! response . body ) body = \"\" ; else body = response . body ; // close the connection client . close (); // prevent socket leak - see xsengine.ini: [communication] - max_open_sockets_per_request // check the contents of the response response_prev . println ( \"status: \" + response . status + \" cookies: \" + co + \" headers: \" + he + \" body: \" + body ); Classes Classes Description Destination Contains metadata, for example, host name, port number and custom values. Client HTTP(s) Client for outbound connectivity. This client supports HTTP and HTTPs connections over HTTP or SOCKS proxy. Request Request class to be used with HTTP client. Functions Function Description Returns readDestination(package, objectName) Returns the HTTP destination with the given name as a Destination object. $.net.http. Destination HTTP constants for methods Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8 HTTP constants for status codes Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"$.net.http"},{"location":"api/net.http/#nethttp","text":"$.net.http represents the http namespace with its fields.","title":"$.net.http"},{"location":"api/net.http/#overview","text":"Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha","title":"Overview"},{"location":"api/net.http/#sample-usage","text":"let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Path Prefix: \" + dest . pathPrefix ); // create client let client = new http . Client (); let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // set the timeout in seconds client . setTimeout ( 10 ); // send the request and synchronously get the response client . request ( request , dest ); let response = client . getResponse (); // get all the cookies and headers from the response let co = [], he = []; for ( let c in response . cookies ) { co . push ( response . cookies [ c ]); } for ( let c in response . headers ) { he . push ( response . headers [ c ]); } // get the body let body ; if ( ! response . body ) body = \"\" ; else body = response . body ; // close the connection client . close (); // prevent socket leak - see xsengine.ini: [communication] - max_open_sockets_per_request // check the contents of the response response_prev . println ( \"status: \" + response . status + \" cookies: \" + co + \" headers: \" + he + \" body: \" + body );","title":"Sample Usage"},{"location":"api/net.http/#classes","text":"Classes Description Destination Contains metadata, for example, host name, port number and custom values. Client HTTP(s) Client for outbound connectivity. This client supports HTTP and HTTPs connections over HTTP or SOCKS proxy. Request Request class to be used with HTTP client.","title":"Classes"},{"location":"api/net.http/#functions","text":"Function Description Returns readDestination(package, objectName) Returns the HTTP destination with the given name as a Destination object. $.net.http. Destination","title":"Functions"},{"location":"api/net.http/#http-constants-for-methods","text":"Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8","title":"HTTP constants for methods"},{"location":"api/net.http/#http-constants-for-status-codes","text":"Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"HTTP constants for status codes"},{"location":"api/net/","text":"$.net $.net represents the network namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha Sample Usage let net = $ . net ; var response = require ( 'http/v4/response' ); // Create a mail Object let mail = new net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); let smtp = new net . SMTPConnection (); // Send the mail Object with SMPT smtp . send ( mail ); // Send the mail Object from the built-in send method. The send method is void in xsk. The response is mocked. let returnValue = mail . send (); let response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; // The result is mocked to prevent errors response . println ( response_msg ); Classes Classes Description Mail Class for constructing and sending multipart emails. SMTPConnection Class for sending $.net.Mail objects via SMTP connection. Destination Contains metadata, for example, host name and port number. Properties Name Description Type http Provides access to the http API. $.net.http HTTP constants for methods Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8 Example let constantVal = $ . net . http . OPTIONS ; HTTP constants for status codes Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505 Example let statusCode = $ . net . http . CONTINUE ;","title":"$.net"},{"location":"api/net/#net","text":"$.net represents the network namespace with its fields.","title":"$.net"},{"location":"api/net/#overview","text":"Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha","title":"Overview"},{"location":"api/net/#sample-usage","text":"let net = $ . net ; var response = require ( 'http/v4/response' ); // Create a mail Object let mail = new net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); let smtp = new net . SMTPConnection (); // Send the mail Object with SMPT smtp . send ( mail ); // Send the mail Object from the built-in send method. The send method is void in xsk. The response is mocked. let returnValue = mail . send (); let response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; // The result is mocked to prevent errors response . println ( response_msg );","title":"Sample Usage"},{"location":"api/net/#classes","text":"Classes Description Mail Class for constructing and sending multipart emails. SMTPConnection Class for sending $.net.Mail objects via SMTP connection. Destination Contains metadata, for example, host name and port number.","title":"Classes"},{"location":"api/net/#properties","text":"Name Description Type http Provides access to the http API. $.net.http","title":"Properties"},{"location":"api/net/#http-constants-for-methods","text":"Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8","title":"HTTP constants for methods"},{"location":"api/net/#example","text":"let constantVal = $ . net . http . OPTIONS ;","title":"Example"},{"location":"api/net/#http-constants-for-status-codes","text":"Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"HTTP constants for status codes"},{"location":"api/net/#example_1","text":"let statusCode = $ . net . http . CONTINUE ;","title":"Example"},{"location":"api/request/","text":"$.request $.request object represents the client HTTP request currently being processed. Overview Definition: https://github.com/SAP/xsk/issues/12 Module: web/web.js Status: alpha Sample Usage function getUser ( id ) { // retrieve user by id } function createUser ( data ) { // create user } function deleteUser ( id ) { // delete user } if ( /\\/?users$/ . test ( $ . request . queryPath )) { const id = $ . request . parameters . get ( \"id\" ); if ( $ . request . method === $ . net . http . PUT ) { if ( $ . request . contentType === \"application/json\" ) { createUser ( $ . request . body ); $ . response . setBody ( `created user [ ${ JSON . stringify ( $ . request . body . asString ()) } ]` ); } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Unsupported content type.\" })); } } else if ( id ) { switch ( $ . request . method ) { case $ . net . http . GET : getUser ( id ); $ . response . setBody ( `retrieved user with id ${ id } ` ); break ; case $ . net . http . DELETE : deleteUser ( id ); $ . response . setBody ( `deleted user with id [ ${ id } ]` ); break ; default : $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported method [ ${ $ . request . method } ]` })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Missing required parameter [id]\" })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported query path [ ${ $ . request . queryPath } ]` })); } Properties Name Description Type body The body of the request. $.web.Body contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList language Language of the request in IETF (BCP 47) format. string method The HTTP method of the incoming HTTP request. $.net.http parameters The parameters of the entity. $.web.TupelList path The URL path specified in the request. string queryPath The URL query path specified in the request. string Functions Function Description Returns setBody(body) Sets the body of the entity. -","title":"$.request"},{"location":"api/request/#request","text":"$.request object represents the client HTTP request currently being processed.","title":"$.request"},{"location":"api/request/#overview","text":"Definition: https://github.com/SAP/xsk/issues/12 Module: web/web.js Status: alpha","title":"Overview"},{"location":"api/request/#sample-usage","text":"function getUser ( id ) { // retrieve user by id } function createUser ( data ) { // create user } function deleteUser ( id ) { // delete user } if ( /\\/?users$/ . test ( $ . request . queryPath )) { const id = $ . request . parameters . get ( \"id\" ); if ( $ . request . method === $ . net . http . PUT ) { if ( $ . request . contentType === \"application/json\" ) { createUser ( $ . request . body ); $ . response . setBody ( `created user [ ${ JSON . stringify ( $ . request . body . asString ()) } ]` ); } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Unsupported content type.\" })); } } else if ( id ) { switch ( $ . request . method ) { case $ . net . http . GET : getUser ( id ); $ . response . setBody ( `retrieved user with id ${ id } ` ); break ; case $ . net . http . DELETE : deleteUser ( id ); $ . response . setBody ( `deleted user with id [ ${ id } ]` ); break ; default : $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported method [ ${ $ . request . method } ]` })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Missing required parameter [id]\" })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported query path [ ${ $ . request . queryPath } ]` })); }","title":"Sample Usage"},{"location":"api/request/#properties","text":"Name Description Type body The body of the request. $.web.Body contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList language Language of the request in IETF (BCP 47) format. string method The HTTP method of the incoming HTTP request. $.net.http parameters The parameters of the entity. $.web.TupelList path The URL path specified in the request. string queryPath The URL query path specified in the request. string","title":"Properties"},{"location":"api/request/#functions","text":"Function Description Returns setBody(body) Sets the body of the entity. -","title":"Functions"},{"location":"api/response/","text":"$.response $.response represents the HTTP response currently being populated. This API is used for returning a result response to the xsk HTTP service caller. Overview Definition: https://github.com/SAP/xsk/issues/13 Module: response/response.js Status: alpha Sample Usage function filterCarsByColor ( color ) { // ...filter operation } if ( $ . request . method === $ . net . http . GET ) { // get query parameter color let color = $ . request . parameters . get ( \"color\" ); // handle some request operation if color param has been passed else return bad request if ( color ) { let cars = filterCarsByColor ( color ); // send response with filtered cars by color $ . response . contentType = \"application/json\" ; $ . response . status = $ . net . http . OK ; $ . response . setBody ( JSON . stringify ({ \"cars\" : cars })); } else { $ . response . status = $ . net . http . BAD_REQUEST ; $ . response . setBody ( JSON . stringify ({ \"error\" : \"missing color parameter\" })); } } else { // unsupported method $ . response . status = $ . net . http . NOT_FOUND ; $ . response . setBody ( JSON . stringify ({ \"error\" : \"not found\" })); } Properties Name Description Type body The body of the response. $.web.Body cacheControl Easy access to the cache control header of the entity. string contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList status The HTTP status code of the outgoing HTTP response. $.net.http Functions Function Description Returns followUp(object) Enable running a follow up job that executes in the background. - setBody(body) Sets the body of the entity. -","title":"$.response"},{"location":"api/response/#response","text":"$.response represents the HTTP response currently being populated. This API is used for returning a result response to the xsk HTTP service caller.","title":"$.response"},{"location":"api/response/#overview","text":"Definition: https://github.com/SAP/xsk/issues/13 Module: response/response.js Status: alpha","title":"Overview"},{"location":"api/response/#sample-usage","text":"function filterCarsByColor ( color ) { // ...filter operation } if ( $ . request . method === $ . net . http . GET ) { // get query parameter color let color = $ . request . parameters . get ( \"color\" ); // handle some request operation if color param has been passed else return bad request if ( color ) { let cars = filterCarsByColor ( color ); // send response with filtered cars by color $ . response . contentType = \"application/json\" ; $ . response . status = $ . net . http . OK ; $ . response . setBody ( JSON . stringify ({ \"cars\" : cars })); } else { $ . response . status = $ . net . http . BAD_REQUEST ; $ . response . setBody ( JSON . stringify ({ \"error\" : \"missing color parameter\" })); } } else { // unsupported method $ . response . status = $ . net . http . NOT_FOUND ; $ . response . setBody ( JSON . stringify ({ \"error\" : \"not found\" })); }","title":"Sample Usage"},{"location":"api/response/#properties","text":"Name Description Type body The body of the response. $.web.Body cacheControl Easy access to the cache control header of the entity. string contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList status The HTTP status code of the outgoing HTTP response. $.net.http","title":"Properties"},{"location":"api/response/#functions","text":"Function Description Returns followUp(object) Enable running a follow up job that executes in the background. - setBody(body) Sets the body of the entity. -","title":"Functions"},{"location":"api/session/","text":"$.session $.session represents the Session with its fields and methods. Overview Definition: https://github.com/SAP/xsk/issues/11 Module: session/session.js Status: alpha Sample Usage var session = $ . session ; var response = require ( 'http/v4/response' ); var username = session . getUsername () var timeout = session . getTimeout () var token = session . getSecurityToken () var authType = session . authType // Check the language of the session response . println ( \"Session language: \" + session . language ) // Check if a particular user has the \"Administrator\" role if ( username === \"dirigible\" && session . hasAppPrivilege ( \"Administrator\" )) { // Check a specific system privilege for that user if ( session . hasSystemPrivilege ( \"Dirigible\" )) { // Perform some operation with his session's information response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } else { // Assert that the user is a Developer in all other cases try { session . assertAppPrivilege ( \"Developer\" ); // Check the authentification type if ( authType === \"BASIC\" ) { // Use the information from the current session response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } catch ( error ) { //Display the missing role that was being asserted response . println ( \"User does not have the role: \" + error . privilege ) } } // After all calls are complete, check the invocation count of the current session response . println ( \"Invocation count: \" + session . getInvocationCount ()); Properties Name Description Type authType Authentication method that was used for the current session. string/null language Language of the session in IETF (BCP 47) format. string samlAttribute Provides the detailed content of the AttributeStatement tag which can be part of a SAML assertion. Array.<$.Session~SamlAttributeObject> samlUserInfo Provides the materialized content of the AttributeStatement tag which can be part of a SAML assertion. object Functions Function Description Returns assertAppPrivilege(privilegeName) Asserts that the logged-on user has a specified application privilege. - assertSystemPrivilege(privilegeName) Asserts that the logged-on user has a specified system privilege. - getInvocationCount() Returns the number of requests sent to the current session. Number getSecurityToken() Returns unique session-specific token that could be used for XSRF prevention. string getTimeout() The timeout of the XS session in seconds. integer getUsername() Returns the username of the logged-on database user. string hasAppPrivilege(privilegeName) Checks whether the logged-on user has a specified application privilege. boolean hasSystemPrivilege(privilegeName) Checks whether the logged-on user has a specified system privilege. boolean","title":"$.session"},{"location":"api/session/#session","text":"$.session represents the Session with its fields and methods.","title":"$.session"},{"location":"api/session/#overview","text":"Definition: https://github.com/SAP/xsk/issues/11 Module: session/session.js Status: alpha","title":"Overview"},{"location":"api/session/#sample-usage","text":"var session = $ . session ; var response = require ( 'http/v4/response' ); var username = session . getUsername () var timeout = session . getTimeout () var token = session . getSecurityToken () var authType = session . authType // Check the language of the session response . println ( \"Session language: \" + session . language ) // Check if a particular user has the \"Administrator\" role if ( username === \"dirigible\" && session . hasAppPrivilege ( \"Administrator\" )) { // Check a specific system privilege for that user if ( session . hasSystemPrivilege ( \"Dirigible\" )) { // Perform some operation with his session's information response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } else { // Assert that the user is a Developer in all other cases try { session . assertAppPrivilege ( \"Developer\" ); // Check the authentification type if ( authType === \"BASIC\" ) { // Use the information from the current session response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } catch ( error ) { //Display the missing role that was being asserted response . println ( \"User does not have the role: \" + error . privilege ) } } // After all calls are complete, check the invocation count of the current session response . println ( \"Invocation count: \" + session . getInvocationCount ());","title":"Sample Usage"},{"location":"api/session/#properties","text":"Name Description Type authType Authentication method that was used for the current session. string/null language Language of the session in IETF (BCP 47) format. string samlAttribute Provides the detailed content of the AttributeStatement tag which can be part of a SAML assertion. Array.<$.Session~SamlAttributeObject> samlUserInfo Provides the materialized content of the AttributeStatement tag which can be part of a SAML assertion. object","title":"Properties"},{"location":"api/session/#functions","text":"Function Description Returns assertAppPrivilege(privilegeName) Asserts that the logged-on user has a specified application privilege. - assertSystemPrivilege(privilegeName) Asserts that the logged-on user has a specified system privilege. - getInvocationCount() Returns the number of requests sent to the current session. Number getSecurityToken() Returns unique session-specific token that could be used for XSRF prevention. string getTimeout() The timeout of the XS session in seconds. integer getUsername() Returns the username of the logged-on database user. string hasAppPrivilege(privilegeName) Checks whether the logged-on user has a specified application privilege. boolean hasSystemPrivilege(privilegeName) Checks whether the logged-on user has a specified system privilege. boolean","title":"Functions"},{"location":"api/trace/","text":"$.trace $.trace represents the trace namespace with its methods. Overview Definition: https://github.com/SAP/xsk/issues/17 Module: trace/trace.js Status: alpha Sample Usage let trace = $ . trace ; let response = require ( 'http/v4/response' ); // Check trace methods availability in the \"Preview\" tab response . println ( \"Debug logging enabled: \" + trace . isDebugEnabled ()); response . println ( \"Error logging enabled: \" + trace . isErrorEnabled ()); response . println ( \"Fatal logging enabled: \" + trace . isFatalEnabled ()); response . println ( \"Info logging enabled: \" + trace . isInfoEnabled ()); response . println ( \"Warning logging enabled: \" + trace . isWarningEnabled ()); // If the trace method is enabled, it will print the message in the \"Console\" tab trace . debug ( \"Debug message!\" ); trace . error ( \"Error message!\" ); trace . error ( \"Fatal message!\" ); trace . info ( \"Info message!\" ); trace . warning ( \"Warning message!\" ); Constants Name Description Type Default XSK_LOG_DEBUG_ENABLED Enables debug level logging. boolean true XSK_LOG_ERROR_ENABLED Enables error level logging. boolean true XSK_LOG_FATAL_ENABLED Enables fatal level logging. boolean true XSK_LOG_INFO_ENABLED Enables log level logging. boolean true XSK_LOG_WARNING_ENABLED Enables warning level logging. boolean true Functions Function Description Returns debug(message) Writes the given message with the trace-level debug to the application trace file. - error(message) Writes the given message with the trace-level error to the application trace file. - fatal(message) Writes the given message with the trace-level fatal to the application trace file. - info(message) Writes the given message with the trace-level info to the application trace file. - warning(message) Writes the given message with the trace-level warning to the application trace file. - isDebugEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level debug. boolean isErrorEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level error. boolean isFatalEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level fatal. boolean isInfoEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level info. boolean isWarningEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level warning. boolean","title":"$.trace"},{"location":"api/trace/#trace","text":"$.trace represents the trace namespace with its methods.","title":"$.trace"},{"location":"api/trace/#overview","text":"Definition: https://github.com/SAP/xsk/issues/17 Module: trace/trace.js Status: alpha","title":"Overview"},{"location":"api/trace/#sample-usage","text":"let trace = $ . trace ; let response = require ( 'http/v4/response' ); // Check trace methods availability in the \"Preview\" tab response . println ( \"Debug logging enabled: \" + trace . isDebugEnabled ()); response . println ( \"Error logging enabled: \" + trace . isErrorEnabled ()); response . println ( \"Fatal logging enabled: \" + trace . isFatalEnabled ()); response . println ( \"Info logging enabled: \" + trace . isInfoEnabled ()); response . println ( \"Warning logging enabled: \" + trace . isWarningEnabled ()); // If the trace method is enabled, it will print the message in the \"Console\" tab trace . debug ( \"Debug message!\" ); trace . error ( \"Error message!\" ); trace . error ( \"Fatal message!\" ); trace . info ( \"Info message!\" ); trace . warning ( \"Warning message!\" );","title":"Sample Usage"},{"location":"api/trace/#constants","text":"Name Description Type Default XSK_LOG_DEBUG_ENABLED Enables debug level logging. boolean true XSK_LOG_ERROR_ENABLED Enables error level logging. boolean true XSK_LOG_FATAL_ENABLED Enables fatal level logging. boolean true XSK_LOG_INFO_ENABLED Enables log level logging. boolean true XSK_LOG_WARNING_ENABLED Enables warning level logging. boolean true","title":"Constants"},{"location":"api/trace/#functions","text":"Function Description Returns debug(message) Writes the given message with the trace-level debug to the application trace file. - error(message) Writes the given message with the trace-level error to the application trace file. - fatal(message) Writes the given message with the trace-level fatal to the application trace file. - info(message) Writes the given message with the trace-level info to the application trace file. - warning(message) Writes the given message with the trace-level warning to the application trace file. - isDebugEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level debug. boolean isErrorEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level error. boolean isFatalEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level fatal. boolean isInfoEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level info. boolean isWarningEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level warning. boolean","title":"Functions"},{"location":"api/util.codec/","text":"$.util.codec $.util.codec object represents the codec namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/21 Module: util/codec/codec.js Status: alpha Sample Usage const codec = $ . util . codec ; const util = $ . util ; const text1 = \"Project XSK as Hex\" ; const text2 = \"Project XSK as Base64\" ; //Hex let result = \"\" ; let encodedHex = codec . encodeHex ( text1 ); result += `' ${ text1 } ' encoded to hex is ${ encodedHex } ` ; let decodedHex = codec . decodeHex ( encodedHex ); result += `\\n' ${ encodedHex } ' decoded to ArrayBuffer is: [ ${ decodedHex } ]` ; let valueFromHex = util . stringify ( decodedHex ); result += `\\n Array Buffer stringified is: ' ${ valueFromHex } '\\n` ; //Base64 let encodedToBase64 = codec . encodeBase64 ( text2 ); result += `\\n' ${ text2 } ' encoded to base64 is ${ encodedToBase64 } ` ; let decodedBase64 = codec . decodeBase64 ( encodedToBase64 ); result += `\\n' ${ encodedToBase64 } ' encoded to ArrayBuffer is: [ ${ decodedBase64 } ]` ; let valueFromBase64 = util . stringify ( decodedBase64 ); result += `\\n Array Buffer stringified is ' ${ valueFromBase64 } '` ; $ . response . setBody ( result ); Functions Function Description Returns decodeBase64(data) Decodes Base64 data. ArrayBuffer decodeHex(data) Decodes hexadecimal data. ArrayBuffer encodeBase64(data) Encodes data into Base64. string encodeHex(data) Encodes data into hexadecimal format. string","title":"$.util.codec"},{"location":"api/util.codec/#utilcodec","text":"$.util.codec object represents the codec namespace with its fields.","title":"$.util.codec"},{"location":"api/util.codec/#overview","text":"Definition: https://github.com/SAP/xsk/issues/21 Module: util/codec/codec.js Status: alpha","title":"Overview"},{"location":"api/util.codec/#sample-usage","text":"const codec = $ . util . codec ; const util = $ . util ; const text1 = \"Project XSK as Hex\" ; const text2 = \"Project XSK as Base64\" ; //Hex let result = \"\" ; let encodedHex = codec . encodeHex ( text1 ); result += `' ${ text1 } ' encoded to hex is ${ encodedHex } ` ; let decodedHex = codec . decodeHex ( encodedHex ); result += `\\n' ${ encodedHex } ' decoded to ArrayBuffer is: [ ${ decodedHex } ]` ; let valueFromHex = util . stringify ( decodedHex ); result += `\\n Array Buffer stringified is: ' ${ valueFromHex } '\\n` ; //Base64 let encodedToBase64 = codec . encodeBase64 ( text2 ); result += `\\n' ${ text2 } ' encoded to base64 is ${ encodedToBase64 } ` ; let decodedBase64 = codec . decodeBase64 ( encodedToBase64 ); result += `\\n' ${ encodedToBase64 } ' encoded to ArrayBuffer is: [ ${ decodedBase64 } ]` ; let valueFromBase64 = util . stringify ( decodedBase64 ); result += `\\n Array Buffer stringified is ' ${ valueFromBase64 } '` ; $ . response . setBody ( result );","title":"Sample Usage"},{"location":"api/util.codec/#functions","text":"Function Description Returns decodeBase64(data) Decodes Base64 data. ArrayBuffer decodeHex(data) Decodes hexadecimal data. ArrayBuffer encodeBase64(data) Encodes data into Base64. string encodeHex(data) Encodes data into hexadecimal format. string","title":"Functions"},{"location":"api/util/","text":"$.util Overview Definition: https://github.com/SAP/xsk/issues/16 Module: util/util.js Status: alpha Sample Usage let util = $ . util ; let randomID = util . createUuid (); // Uint8Array let arrayBuffer = [ 84 , 104 , 105 , 115 , 32 , 105 , 115 , 32 , 97 , 32 , 85 , 105 , ]; let convertedBuff = util . stringify ( arrayBuffer ); let result = `randomID is : ${ randomID } ` ; result += `\\nconvertedBuff is: ${ arrayBuffer } ` ; $ . response . setBody ( result ); Functions Members Description Returns createUuid() Returns a unique UUID. string stringify(data) Recieves UintArray and return converted value. string","title":"$.util"},{"location":"api/util/#util","text":"","title":"$.util"},{"location":"api/util/#overview","text":"Definition: https://github.com/SAP/xsk/issues/16 Module: util/util.js Status: alpha","title":"Overview"},{"location":"api/util/#sample-usage","text":"let util = $ . util ; let randomID = util . createUuid (); // Uint8Array let arrayBuffer = [ 84 , 104 , 105 , 115 , 32 , 105 , 115 , 32 , 97 , 32 , 85 , 105 , ]; let convertedBuff = util . stringify ( arrayBuffer ); let result = `randomID is : ${ randomID } ` ; result += `\\nconvertedBuff is: ${ arrayBuffer } ` ; $ . response . setBody ( result );","title":"Sample Usage"},{"location":"api/util/#functions","text":"Members Description Returns createUuid() Returns a unique UUID. string stringify(data) Recieves UintArray and return converted value. string","title":"Functions"},{"location":"api/web/","text":"$.web $.web represents the web api namespace which is related to the $.request and $.response APIs. Overview Definition: https://github.com/SAP/xsk/issues/22 Module: web/web.js Status: alpha Classes $.web.Body Functions Function Description Returns asArrayBuffer() Returns the content of an HTTP request entity body as ArrayBuffer. ArrayBuffer asArrayBuffer() Returns the content of an HTTP request entity body as ArrayBuffer. string asWebRequest() Returns the content of an HTTP request entity body as WebRequest. $.web.WebRequest $.web.EntityList Properties Name Description Type length The size of the entity list. integer Functions Function Description Returns create() Creates a sub-entity in the current list of entities in EntityList. $.web.WebEntityResponse $.web.TupelList Properties Name Description Type length The size of the tupel list. integer Functions Function Description Returns get(name) Returns the values for a given name. string remove(name) Removes the value for a given name. - set(name, value) Sets the value for a given name. boolean $.web.WebEntityRequest Properties Name Description Type body The body of the request. $.web.Body contentType The content type of the entity. string entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList parameters The parameters of the entity. $.web.TupelList Functions Function Description Returns setBody(body, index) Sets the body of the entity. - $.web.WebEntityResponse Properties Name Description Type body The body of the response. $.web.Body contentType The content type of the entity. string entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList Functions Function Description Returns setBody(body, index) Sets the body of the entity. - $.web.WebRequest $.web.WebResponse","title":"$.web"},{"location":"api/web/#web","text":"$.web represents the web api namespace which is related to the $.request and $.response APIs.","title":"$.web"},{"location":"api/web/#overview","text":"Definition: https://github.com/SAP/xsk/issues/22 Module: web/web.js Status: alpha","title":"Overview"},{"location":"api/web/#classes","text":"","title":"Classes"},{"location":"api/web/#webbody","text":"","title":"$.web.Body"},{"location":"api/web/#functions","text":"Function Description Returns asArrayBuffer() Returns the content of an HTTP request entity body as ArrayBuffer. ArrayBuffer asArrayBuffer() Returns the content of an HTTP request entity body as ArrayBuffer. string asWebRequest() Returns the content of an HTTP request entity body as WebRequest. $.web.WebRequest","title":"Functions"},{"location":"api/web/#webentitylist","text":"","title":"$.web.EntityList"},{"location":"api/web/#properties","text":"Name Description Type length The size of the entity list. integer","title":"Properties"},{"location":"api/web/#functions_1","text":"Function Description Returns create() Creates a sub-entity in the current list of entities in EntityList. $.web.WebEntityResponse","title":"Functions"},{"location":"api/web/#webtupellist","text":"","title":"$.web.TupelList"},{"location":"api/web/#properties_1","text":"Name Description Type length The size of the tupel list. integer","title":"Properties"},{"location":"api/web/#functions_2","text":"Function Description Returns get(name) Returns the values for a given name. string remove(name) Removes the value for a given name. - set(name, value) Sets the value for a given name. boolean","title":"Functions"},{"location":"api/web/#webwebentityrequest","text":"","title":"$.web.WebEntityRequest"},{"location":"api/web/#properties_2","text":"Name Description Type body The body of the request. $.web.Body contentType The content type of the entity. string entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList parameters The parameters of the entity. $.web.TupelList","title":"Properties"},{"location":"api/web/#functions_3","text":"Function Description Returns setBody(body, index) Sets the body of the entity. -","title":"Functions"},{"location":"api/web/#webwebentityresponse","text":"","title":"$.web.WebEntityResponse"},{"location":"api/web/#properties_3","text":"Name Description Type body The body of the response. $.web.Body contentType The content type of the entity. string entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList","title":"Properties"},{"location":"api/web/#functions_4","text":"Function Description Returns setBody(body, index) Sets the body of the entity. -","title":"Functions"},{"location":"api/web/#webwebrequest","text":"","title":"$.web.WebRequest"},{"location":"api/web/#webwebresponse","text":"","title":"$.web.WebResponse"},{"location":"setup/","text":"Local Setup Overview You can deploy XSK locally using Docker or Tomcat server. Steps Deploy as a Docker container or on Tomcat server. Docker Prerequisites Install Docker . Start the container: Run docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest with Mounted Volume docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ -v <your-local-directory>:/usr/local/tomcat/target \\ dirigiblelabs/xsk:latest with HANA Cloud docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest \\ -e DIRIGIBLE_DATABASE_PROVIDER=custom \\ -e DIRIGIBLE_DATABASE_CUSTOM_DATASOURCES=HANA \\ -e DIRIGIBLE_DATABASE_DATASOURCE_NAME_DEFAULT=HANA \\ -e HANA_DRIVER=com.sap.db.jdbc.Driver \\ -e HANA_URL=jdbc:sap://<hanaHost>?encrypt=true&validateCertificate=true \\ -e HANA_USERNAME=<hanaUsername> \\ -e HANA_PASSWORD=<hanaPassword> Note Replace the <hanaHost> placeholder with the HANA Cloud host that you're going to use. Replace the <hanaUsername> placeholder with the HANA Cloud username that you're going to use. Replace the <hanaPassword> placeholder with the HANA Cloud password that you're going to use. Windows For setup on Windows OS, issues may appear with the way the environment variables ( -e XXX=YYY ) are provided. Either they should be properly escaped, or they could be supplied as *.env file : docker run --name xsk \\ --env-file env-variables.env \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest Tomcat Prerequisites Java 11 or Java 13 installed (default, required during runtime). Java 8 JRE/JDK installed (additional, required for compatability reasons). Download ROOT.war for Tomcat from: https://github.com/SAP/xsk/releases/latest Note For local test & development purposes, we recommend the server distribution. Configure the Users store under $CATALINA_HOME/conf/tomcat-users.xml : <tomcat-users> <role rolename= \"Developer\" /> <role rolename= \"Operator\" /> <role rolename= \"Everyone\" /> <user username= \"dirigible\" password= \"dirigible\" roles= \"Developer,Operator,Everyone\" /> </tomcat-users> Copy the XSK's ROOT.war to $TOMCAT/webapps folder. Provide the Java 8 JRE/JDK path. export JAVA8_HOME=<pathToJava8> Note Replace the <pathToJava8> placeholder with the actual path to your Java 8 installation (e.g. /usr/lib/jvm/java-8-openjdk-amd64/ ) . Configure connection to HANA Cloud instance. export HANA_DRIVER=com.sap.db.jdbc.Driver export HANA_URL=jdbc:sap://<hanaHost>?encrypt=true&validateCertificate=true export HANA_USERNAME=<hanaUsername> export HANA_PASSWORD=<hanaPassword> Note Replace the <hanaHost> placeholder with the HANA Cloud host that you're going to use. Replace the <hanaUsername> placeholder with the HANA Cloud username that you're going to use. Replace the <hanaPassword> placeholder with the HANA Cloud password that you're going to use. Start the Tomcat server. XSK versions Instead of using the latest tag (version), for production and development use cases it is recommended that you use a stable release version: You can find all released versions here . You can find all XSK Docker images and tags (versions) here . Open a web browser and go to: http://localhost:8080/ Note The default user name and password are dirigible/dirigible . Stop the container: docker stop dirigible","title":"Local"},{"location":"setup/#local-setup","text":"","title":"Local Setup"},{"location":"setup/#overview","text":"You can deploy XSK locally using Docker or Tomcat server.","title":"Overview"},{"location":"setup/#steps","text":"Deploy as a Docker container or on Tomcat server. Docker Prerequisites Install Docker . Start the container: Run docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest with Mounted Volume docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ -v <your-local-directory>:/usr/local/tomcat/target \\ dirigiblelabs/xsk:latest with HANA Cloud docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest \\ -e DIRIGIBLE_DATABASE_PROVIDER=custom \\ -e DIRIGIBLE_DATABASE_CUSTOM_DATASOURCES=HANA \\ -e DIRIGIBLE_DATABASE_DATASOURCE_NAME_DEFAULT=HANA \\ -e HANA_DRIVER=com.sap.db.jdbc.Driver \\ -e HANA_URL=jdbc:sap://<hanaHost>?encrypt=true&validateCertificate=true \\ -e HANA_USERNAME=<hanaUsername> \\ -e HANA_PASSWORD=<hanaPassword> Note Replace the <hanaHost> placeholder with the HANA Cloud host that you're going to use. Replace the <hanaUsername> placeholder with the HANA Cloud username that you're going to use. Replace the <hanaPassword> placeholder with the HANA Cloud password that you're going to use. Windows For setup on Windows OS, issues may appear with the way the environment variables ( -e XXX=YYY ) are provided. Either they should be properly escaped, or they could be supplied as *.env file : docker run --name xsk \\ --env-file env-variables.env \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest Tomcat Prerequisites Java 11 or Java 13 installed (default, required during runtime). Java 8 JRE/JDK installed (additional, required for compatability reasons). Download ROOT.war for Tomcat from: https://github.com/SAP/xsk/releases/latest Note For local test & development purposes, we recommend the server distribution. Configure the Users store under $CATALINA_HOME/conf/tomcat-users.xml : <tomcat-users> <role rolename= \"Developer\" /> <role rolename= \"Operator\" /> <role rolename= \"Everyone\" /> <user username= \"dirigible\" password= \"dirigible\" roles= \"Developer,Operator,Everyone\" /> </tomcat-users> Copy the XSK's ROOT.war to $TOMCAT/webapps folder. Provide the Java 8 JRE/JDK path. export JAVA8_HOME=<pathToJava8> Note Replace the <pathToJava8> placeholder with the actual path to your Java 8 installation (e.g. /usr/lib/jvm/java-8-openjdk-amd64/ ) . Configure connection to HANA Cloud instance. export HANA_DRIVER=com.sap.db.jdbc.Driver export HANA_URL=jdbc:sap://<hanaHost>?encrypt=true&validateCertificate=true export HANA_USERNAME=<hanaUsername> export HANA_PASSWORD=<hanaPassword> Note Replace the <hanaHost> placeholder with the HANA Cloud host that you're going to use. Replace the <hanaUsername> placeholder with the HANA Cloud username that you're going to use. Replace the <hanaPassword> placeholder with the HANA Cloud password that you're going to use. Start the Tomcat server. XSK versions Instead of using the latest tag (version), for production and development use cases it is recommended that you use a stable release version: You can find all released versions here . You can find all XSK Docker images and tags (versions) here . Open a web browser and go to: http://localhost:8080/ Note The default user name and password are dirigible/dirigible . Stop the container: docker stop dirigible","title":"Steps"},{"location":"setup/cloud-foundry/","text":"Setup in Cloud Foundry Overview You can deploy XSK in the SAP BTP 1 , Cloud Foundry environment. Prerequisites Install Cloud Foundry Command Line Interface . Access to SAP BTP account (the Trial landscape can be accessed here ). Create HANA Cloud service instance in SAP BTP Cloud Foundry space. Create a separate HANA Cloud user that will be used from the XSK engine. Steps Set the SAP BTP Cloud Foundry API host: cf api <cloud-foundry-api-host> Log in to the SAP BTP, Cloud Foundry environment with: cf login Create an XSUAA service instance: Copy and paste the following content into xs-security.json : { \"xsappname\" : \"<applicationName>-xsuaa\" , \"tenant-mode\" : \"shared\" , \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <applicationName> placeholder with your application name, e.g. xsk . Create an XSUAA service instance: cf create-service xsuaa application <applicationName>-xsuaa -c xs-security.json Note Use the same <applicationName> as in the previous step. Deploy XSK: Docker cf push xsk \\ --docker-image=dirigiblelabs/xsk-cf:latest \\ --hostname xsk-<org-name> \\ -m 2G -k 2G Note Replace the <org-name> placeholder with your subaccount's Subdomain value. XSK versions Instead of using the latest tag (version), for production and development use cases it is recommended that you use a stable release version: You can find all released versions here . You can find all XSK Docker images and tags (versions) here . Bind the XSUAA and HANA Cloud service instances to the XSK deployment: cf bind-service xsk <applicationName>-xsuaa cf bind-service xsk <hanaCloudInstanceName> cf set-env xsk HANA_USERNAME <hanaCloudUsername> cf set-env xsk HANA_PASSWORD <hanaCloudPassword> Note Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Restart the xsk deployment: cf restart xsk Buildpack Download the sap-cf binaries from the downloads site: https://github.com/SAP/xsk/releases Unzip the downloaded archive to extract the ROOT.war file. Create manifest.yaml file in the same directory where the ROOT.war is located: applications : - name : xsk host : xsk-<org-name> memory : 2G buildpack : sap_java_buildpack path : ROOT.war env : JBP_CONFIG_COMPONENTS : \"jres: ['com.sap.xs.java.buildpack.jdk.SAPMachineJDK']\" JBP_CONFIG_SAP_MACHINE_JRE : 'jre: { version: 11.+ }' HANA_USERNAME : <hanaUsername> HANA_PASSWORD : <hanaPassword> services : - <applicationName>-xsuaa - <hanaCloudInstanceName> Note Replace the <org-name> placeholder with your subaccount's Subdomain value. Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Deploy with: cf push Assign the Developer and Operator roles. Log in. Additional Information You can find a step-by-step tutorial here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Cloud Foundry"},{"location":"setup/cloud-foundry/#setup-in-cloud-foundry","text":"","title":"Setup in Cloud Foundry"},{"location":"setup/cloud-foundry/#overview","text":"You can deploy XSK in the SAP BTP 1 , Cloud Foundry environment. Prerequisites Install Cloud Foundry Command Line Interface . Access to SAP BTP account (the Trial landscape can be accessed here ). Create HANA Cloud service instance in SAP BTP Cloud Foundry space. Create a separate HANA Cloud user that will be used from the XSK engine.","title":"Overview"},{"location":"setup/cloud-foundry/#steps","text":"Set the SAP BTP Cloud Foundry API host: cf api <cloud-foundry-api-host> Log in to the SAP BTP, Cloud Foundry environment with: cf login Create an XSUAA service instance: Copy and paste the following content into xs-security.json : { \"xsappname\" : \"<applicationName>-xsuaa\" , \"tenant-mode\" : \"shared\" , \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <applicationName> placeholder with your application name, e.g. xsk . Create an XSUAA service instance: cf create-service xsuaa application <applicationName>-xsuaa -c xs-security.json Note Use the same <applicationName> as in the previous step. Deploy XSK: Docker cf push xsk \\ --docker-image=dirigiblelabs/xsk-cf:latest \\ --hostname xsk-<org-name> \\ -m 2G -k 2G Note Replace the <org-name> placeholder with your subaccount's Subdomain value. XSK versions Instead of using the latest tag (version), for production and development use cases it is recommended that you use a stable release version: You can find all released versions here . You can find all XSK Docker images and tags (versions) here . Bind the XSUAA and HANA Cloud service instances to the XSK deployment: cf bind-service xsk <applicationName>-xsuaa cf bind-service xsk <hanaCloudInstanceName> cf set-env xsk HANA_USERNAME <hanaCloudUsername> cf set-env xsk HANA_PASSWORD <hanaCloudPassword> Note Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Restart the xsk deployment: cf restart xsk Buildpack Download the sap-cf binaries from the downloads site: https://github.com/SAP/xsk/releases Unzip the downloaded archive to extract the ROOT.war file. Create manifest.yaml file in the same directory where the ROOT.war is located: applications : - name : xsk host : xsk-<org-name> memory : 2G buildpack : sap_java_buildpack path : ROOT.war env : JBP_CONFIG_COMPONENTS : \"jres: ['com.sap.xs.java.buildpack.jdk.SAPMachineJDK']\" JBP_CONFIG_SAP_MACHINE_JRE : 'jre: { version: 11.+ }' HANA_USERNAME : <hanaUsername> HANA_PASSWORD : <hanaPassword> services : - <applicationName>-xsuaa - <hanaCloudInstanceName> Note Replace the <org-name> placeholder with your subaccount's Subdomain value. Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Deploy with: cf push Assign the Developer and Operator roles. Log in. Additional Information You can find a step-by-step tutorial here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Steps"},{"location":"setup/helm/","text":"Setup with Helm Overview You can deploy XSK via Helm chart in a Kubernetes cluster. Prerequisites Install the Helm CLI . Make sure you have access to a Kubernetes Cluster . Steps Add the XSK Helm repository: helm repo add xsk https://www.xsk.io helm repo update Deployment To deploy XSK, you can either use the default or the Kyma setup instructions: Default Setup helm install xsk xsk/xsk Accessing the XSK Instance Running this command will install XSK Deployment and Service with ClusterIP only. To access the XSK instance, execute the command that was printed in the console. Example: export POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=xsk,app.kubernetes.io/instance=xsk\" -o jsonpath=\"{.items[0].metadata.name}\") echo \"Visit http://127.0.0.1:8080 to use your application\" kubectl --namespace default port-forward $POD_NAME 8080:8080 Navigate to: http://127.0.0.1:8080 Log in with these username and password: dirigible / dirigible Setup on Kyma You can choose to set up XSK in Helm on Kyma following either the basic or the PostgreSQL setup instructions: Basic helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> This will install additionally an ApiRule and XSUAA ServiceInstance and ServiceBinding. The appropriate roles should be assigned to the user. Configuration Options You can also use other configuration parameters. See List of All Configurable Parameters and Their Values . PostgreSQL helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> \\ --set database.enabled=true This will install also PostgreSQL database with 1Gi storage and update the XSK datasource configuration to consume the database. Configuration Options You can also use other configuration parameters. See List of All Configurable Parameters and Their Values . Next Steps If you want to uninstall Helm, run: helm uninstall xsk Configuration Options The following table lists all the configurable parameters exposed by the XSK chart and their default values: List of All Configurable Parameters and Their Values Name Description Default dirigible.image Custom Dirigible image \"\" image.repository Dirigible image repo dirigiblelabs/dirigible-all image.repositoryKyma Dirigible Kyma image repo dirigiblelabs/dirigible-sap-kyma image.repositoryKeycloak Dirigible Keycloak image repo dirigiblelabs/dirigible-keycloak image.pullPolicy Image pull policy IfNotPresent service.type Service type ClusterIP service.port Service port 8080 replicaCount Number of replicas 1 imagePullSecrets Image pull secrets [] nameOverride Name override \"\" fullnameOverride Fullname override \"\" podSecurityContext Pod security context {} nodeSelector Node selector {} tolerations Tolerations [] affinity Affinity {} resources Resources {}","title":"Helm"},{"location":"setup/helm/#setup-with-helm","text":"","title":"Setup with Helm"},{"location":"setup/helm/#overview","text":"You can deploy XSK via Helm chart in a Kubernetes cluster. Prerequisites Install the Helm CLI . Make sure you have access to a Kubernetes Cluster .","title":"Overview"},{"location":"setup/helm/#steps","text":"Add the XSK Helm repository: helm repo add xsk https://www.xsk.io helm repo update Deployment To deploy XSK, you can either use the default or the Kyma setup instructions:","title":"Steps"},{"location":"setup/helm/#default-setup","text":"helm install xsk xsk/xsk Accessing the XSK Instance Running this command will install XSK Deployment and Service with ClusterIP only. To access the XSK instance, execute the command that was printed in the console. Example: export POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=xsk,app.kubernetes.io/instance=xsk\" -o jsonpath=\"{.items[0].metadata.name}\") echo \"Visit http://127.0.0.1:8080 to use your application\" kubectl --namespace default port-forward $POD_NAME 8080:8080 Navigate to: http://127.0.0.1:8080 Log in with these username and password: dirigible / dirigible","title":"Default Setup"},{"location":"setup/helm/#setup-on-kyma","text":"You can choose to set up XSK in Helm on Kyma following either the basic or the PostgreSQL setup instructions: Basic helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> This will install additionally an ApiRule and XSUAA ServiceInstance and ServiceBinding. The appropriate roles should be assigned to the user. Configuration Options You can also use other configuration parameters. See List of All Configurable Parameters and Their Values . PostgreSQL helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> \\ --set database.enabled=true This will install also PostgreSQL database with 1Gi storage and update the XSK datasource configuration to consume the database. Configuration Options You can also use other configuration parameters. See List of All Configurable Parameters and Their Values .","title":"Setup on Kyma"},{"location":"setup/helm/#next-steps","text":"If you want to uninstall Helm, run: helm uninstall xsk","title":"Next Steps"},{"location":"setup/helm/#configuration-options","text":"The following table lists all the configurable parameters exposed by the XSK chart and their default values:","title":"Configuration Options"},{"location":"setup/helm/#list-of-all-configurable-parameters-and-their-values","text":"Name Description Default dirigible.image Custom Dirigible image \"\" image.repository Dirigible image repo dirigiblelabs/dirigible-all image.repositoryKyma Dirigible Kyma image repo dirigiblelabs/dirigible-sap-kyma image.repositoryKeycloak Dirigible Keycloak image repo dirigiblelabs/dirigible-keycloak image.pullPolicy Image pull policy IfNotPresent service.type Service type ClusterIP service.port Service port 8080 replicaCount Number of replicas 1 imagePullSecrets Image pull secrets [] nameOverride Name override \"\" fullnameOverride Fullname override \"\" podSecurityContext Pod security context {} nodeSelector Node selector {} tolerations Tolerations [] affinity Affinity {} resources Resources {}","title":"List of All Configurable Parameters and Their Values"},{"location":"setup/kyma/","text":"Setup in Kyma Overview You can deploy XSK in the SAP BTP 1 , Kyma environment. Prerequisites Install kubectl (optional) Navigate to your SAP BTP global account. You can access your Trial account in the SAP BTP cockpit from here . Warning At the time of writing these setup instructions (19.08.2021) , creating a HANA Cloud service instance in the SAP BTP Kyma environment was not possible, thus the setup is currently suitable only for test & demo purposes. You can find a workaround solution here . Steps Access the SAP BTP, Kyma environment via the SAP BTP cockpit: Deploy XSK: Copy and paste the following content into deployment.yaml : apiVersion : apps/v1 kind : Deployment metadata : name : xsk namespace : default spec : replicas : 1 selector : matchLabels : app : xsk template : metadata : labels : app : xsk spec : containers : - name : xsk image : dirigiblelabs/xsk-kyma:latest imagePullPolicy : Always env : - name : DIRIGIBLE_THEME_DEFAULT value : fiori - name : DIRIGIBLE_HOST value : https://xsk.<your-kyma-cluster-host> volumeMounts : - name : xsk-volume mountPath : /usr/local/tomcat/target/dirigible/repository ports : - containerPort : 8080 name : xsk protocol : TCP volumes : - name : xsk-volume persistentVolumeClaim : claimName : xsk-claim --- apiVersion : v1 kind : Service metadata : labels : app : xsk name : xsk namespace : default spec : ports : - name : xsk port : 8080 protocol : TCP targetPort : 8080 selector : app : xsk type : ClusterIP --- apiVersion : v1 kind : PersistentVolumeClaim metadata : name : xsk-claim spec : accessModes : - ReadWriteOnce resources : requests : storage : 1Gi --- apiVersion : gateway.kyma-project.io/v1alpha1 kind : APIRule metadata : name : xsk namespace : default spec : gateway : kyma-gateway.kyma-system.svc.cluster.local rules : - accessStrategies : - config : {} handler : noop methods : - GET - POST - PUT - PATCH - DELETE - HEAD path : /.* service : host : xsk.<your-kyma-cluster-host> name : xsk port : 8080 Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com ) . XSK versions Instead of using the latest tag (version), for production and development use cases it is recommended that you use a stable release version: You can find all released versions here . You can find all XSK Docker images and tags (versions) here . Navigate to your Kyma dashboard and select the default namespace. Click the Deploy new resource button and select the deployment.yaml file. Note Alternatively, you can use the kubectl -f deployment.yaml to deploy the resources. Create an XSUAA service instance: From the Kyma dashboard, go to Service Management \u2192 Catalog . Find the Authorization & Trust Management service. Create a new service instance. Provide the following additional parameters: { \"xsappname\" : \"xsk-xsuaa\" , \"oauth2-configuration\" : { \"token-validity\" : 7200 , \"redirect-uris\" : [ \"https://xsk.<your-kyma-cluster-host>\" ] }, \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com ). Bind the servce instance to the xsk application. Assign the Developer and Operator roles. Log in. Additional Materials You can find a step-by-step tutorial here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Kyma"},{"location":"setup/kyma/#setup-in-kyma","text":"","title":"Setup in Kyma"},{"location":"setup/kyma/#overview","text":"You can deploy XSK in the SAP BTP 1 , Kyma environment. Prerequisites Install kubectl (optional) Navigate to your SAP BTP global account. You can access your Trial account in the SAP BTP cockpit from here . Warning At the time of writing these setup instructions (19.08.2021) , creating a HANA Cloud service instance in the SAP BTP Kyma environment was not possible, thus the setup is currently suitable only for test & demo purposes. You can find a workaround solution here .","title":"Overview"},{"location":"setup/kyma/#steps","text":"Access the SAP BTP, Kyma environment via the SAP BTP cockpit: Deploy XSK: Copy and paste the following content into deployment.yaml : apiVersion : apps/v1 kind : Deployment metadata : name : xsk namespace : default spec : replicas : 1 selector : matchLabels : app : xsk template : metadata : labels : app : xsk spec : containers : - name : xsk image : dirigiblelabs/xsk-kyma:latest imagePullPolicy : Always env : - name : DIRIGIBLE_THEME_DEFAULT value : fiori - name : DIRIGIBLE_HOST value : https://xsk.<your-kyma-cluster-host> volumeMounts : - name : xsk-volume mountPath : /usr/local/tomcat/target/dirigible/repository ports : - containerPort : 8080 name : xsk protocol : TCP volumes : - name : xsk-volume persistentVolumeClaim : claimName : xsk-claim --- apiVersion : v1 kind : Service metadata : labels : app : xsk name : xsk namespace : default spec : ports : - name : xsk port : 8080 protocol : TCP targetPort : 8080 selector : app : xsk type : ClusterIP --- apiVersion : v1 kind : PersistentVolumeClaim metadata : name : xsk-claim spec : accessModes : - ReadWriteOnce resources : requests : storage : 1Gi --- apiVersion : gateway.kyma-project.io/v1alpha1 kind : APIRule metadata : name : xsk namespace : default spec : gateway : kyma-gateway.kyma-system.svc.cluster.local rules : - accessStrategies : - config : {} handler : noop methods : - GET - POST - PUT - PATCH - DELETE - HEAD path : /.* service : host : xsk.<your-kyma-cluster-host> name : xsk port : 8080 Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com ) . XSK versions Instead of using the latest tag (version), for production and development use cases it is recommended that you use a stable release version: You can find all released versions here . You can find all XSK Docker images and tags (versions) here . Navigate to your Kyma dashboard and select the default namespace. Click the Deploy new resource button and select the deployment.yaml file. Note Alternatively, you can use the kubectl -f deployment.yaml to deploy the resources. Create an XSUAA service instance: From the Kyma dashboard, go to Service Management \u2192 Catalog . Find the Authorization & Trust Management service. Create a new service instance. Provide the following additional parameters: { \"xsappname\" : \"xsk-xsuaa\" , \"oauth2-configuration\" : { \"token-validity\" : 7200 , \"redirect-uris\" : [ \"https://xsk.<your-kyma-cluster-host>\" ] }, \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com ). Bind the servce instance to the xsk application. Assign the Developer and Operator roles. Log in. Additional Materials You can find a step-by-step tutorial here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Steps"},{"location":"setup/setup-environment-variables/","text":"Environment Variables Configuration Types Depending on the layer that defines the configuration variables, they have the following priorities: Runtime Highest precedence: No rebuild or restart of the application is required when a configuration is changed. You can use the Configuration API to apply changes in the Runtime configuration. Environment Second precedence: No rebuild is required when a configuration is changed. However, you should restart the application to apply the environment changes. Usually, the Environment configurations are provided during the application deployment, as part of application descriptor (e.g. Define environment variable for container in Kubernetes , or in Cloud Foundry App Manifest ) . Deployment Third precedence: Rebuild and redeployment are required. \"Default\" deployment ( ROOT.war ) configuration variables are taken from dirigible.properties properties file. You can find a sample here . Module Lowest precedence: Rebuild and redeployment are required. \"Default\" module (e.g. dirigible-database-custom.jar , dirigible-database-h2.jar ) configuration variables are taken from dirigible-xxx.properties properties files. You can find samples here and here . Note The precedence order means that if the there is an Environment variable with name DIRIGIBLE_TEST and Runtime variable with the same name, the Runtime variable will have higher priority and will be applied. You can find all applied configuration values under the Configurations View . Configuration Parameters HDI Environment Variables Parameter Description Default* XSK_HDI_SUPPORTED Whether the HDI API is supported by the database (e.g. HANA) true XSK_HDI_ONLY Database models to be processed only via the HDI API false Additional Information You can find all Eclipse Dirigible related environment variables here .","title":"Environment Variables"},{"location":"setup/setup-environment-variables/#environment-variables","text":"","title":"Environment Variables"},{"location":"setup/setup-environment-variables/#configuration-types","text":"Depending on the layer that defines the configuration variables, they have the following priorities: Runtime Highest precedence: No rebuild or restart of the application is required when a configuration is changed. You can use the Configuration API to apply changes in the Runtime configuration. Environment Second precedence: No rebuild is required when a configuration is changed. However, you should restart the application to apply the environment changes. Usually, the Environment configurations are provided during the application deployment, as part of application descriptor (e.g. Define environment variable for container in Kubernetes , or in Cloud Foundry App Manifest ) . Deployment Third precedence: Rebuild and redeployment are required. \"Default\" deployment ( ROOT.war ) configuration variables are taken from dirigible.properties properties file. You can find a sample here . Module Lowest precedence: Rebuild and redeployment are required. \"Default\" module (e.g. dirigible-database-custom.jar , dirigible-database-h2.jar ) configuration variables are taken from dirigible-xxx.properties properties files. You can find samples here and here . Note The precedence order means that if the there is an Environment variable with name DIRIGIBLE_TEST and Runtime variable with the same name, the Runtime variable will have higher priority and will be applied. You can find all applied configuration values under the Configurations View .","title":"Configuration Types"},{"location":"setup/setup-environment-variables/#configuration-parameters","text":"","title":"Configuration Parameters"},{"location":"setup/setup-environment-variables/#hdi-environment-variables","text":"Parameter Description Default* XSK_HDI_SUPPORTED Whether the HDI API is supported by the database (e.g. HANA) true XSK_HDI_ONLY Database models to be processed only via the HDI API false Additional Information You can find all Eclipse Dirigible related environment variables here .","title":"HDI Environment Variables"}]}