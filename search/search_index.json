{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project XSK Project XSK is a compatible environment for SAP HANA Extended Application Services (XS) based applications. It is deployed outside of SAP HANA instance as a Docker a container on Kubernetes . Hence, some of the features can work against any other JDBC compliant RDBMS such as PostgreSQL . The compatibility stack is an extension of the Eclipse Dirigible cloud development platform. Try it Out","title":"Welcome"},{"location":"#project-xsk","text":"Project XSK is a compatible environment for SAP HANA Extended Application Services (XS) based applications. It is deployed outside of SAP HANA instance as a Docker a container on Kubernetes . Hence, some of the features can work against any other JDBC compliant RDBMS such as PostgreSQL . The compatibility stack is an extension of the Eclipse Dirigible cloud development platform. Try it Out","title":"Project XSK"},{"location":"api/%24.hdb/","text":"$.hdb $.hdb namespace provides means for seamless HANA database access. It is intended to be a replacement for the older $.db namespace. The fundamental goal of the new interface is to ensure simplicity, convenience, completeness, and performance. Overview Definition: https://github.com/SAP/xsk/issues/14 Module: hdb/hdb.js Basic Usage var db = $ . hdb ; var response = require ( 'http/v4/response' ); var tableName = \"CARS\" ; try { var connection = db . getConnection (); // Make sure to create the table only once connection . executeUpdate ( \"CREATE TABLE \" + tableName + \" (MAKE varchar(255), MODEL varchar(255))\" ); var rows = connection . executeUpdate ( \"INSERT INTO \" + tableName + \" (MAKE, MODEL) VALUES ('BMW', '325'), ('HONDA', 'ACCORD');\" ); response . println ( \"Query OK, \" + rows + \" rows affected\\n\" ); var result = connection . executeQuery ( 'SELECT * FROM ' + tableName ); var iterator = result . getIterator (); var metadata = result . metadata . columns ; var columnCount = metadata . length ; var totalText = \"\" ; while ( iterator . next ()) { var currentRow = iterator . value (); var text = \"\\n\" + metadata [ 0 ]. name + \": \" + currentRow [ metadata [ 0 ]. name ] + \"\\n\" + metadata [ 1 ]. name + \": \" + currentRow [ metadata [ 1 ]. name ] + \"\\n\" ; response . println ( text ); } } catch ( e ) { connection . rollback (); response . println ( \"Transaction was rolled back: \" + e . message ); } finally { connection . close (); } response . flush (); response . close (); Coverage $.hdb Method Description getConnection() Returns a connection to the database Members Members Description Type isolation Constants that represent the isolation levels for a transaction types Set of constants of the database column types. The JavaScript Type column below describes the implicit Database to JavaScript type convertions performed by the $.hdb API Isolation Properties Name Type Default READ_COMITTED number 2 REPEATABLE_READ number 4 SERIALIZABLE number 8 Types Name Value JavaScript Type Comment TINYINT 1 Number SMALLINT 2 Number INTEGER 3 Number BIGINT 4 ctypes.Int64 DECIMAL 5 String REAL 6 Number DOUBLE 7 Number CHAR 8 String VARCHAR 9 String NCHAR 10 String NVARCHAR 11 String BINARY 12 ArrayBuffer VARBINARY 13 ArrayBuffer DATE 14 Date TIME 15 Date TIMESTAMP 16 Date CLOB 25 String NCLOB 26 String BLOB 27 ArrayBuffer SMALLDECIMAL 47 String TEXT 51 ArrayBuffer SHORTTEXT 52 String ALPHANUM 55 String SECONDDATE 62 Date ST_GEOMETRY 74 ArrayBuffer consider using SQL's ST_asGeoJSON() on ST_GEOMETRY columns for easy consumption ST_POINT 75 ArrayBuffer consider using SQL's ST_asGeoJSON() on ST_POINT columns for easy consumption $.hdb.Connection Method Description close() Closes the connection. commit() Commits the changes. isClosed() Checks if the connection is closed. executeQuery(query, arguments(optional)) Executes a database query. The query string is prepared and the additional arguments are applied as statement parameters, before the statement is executed. executeUpdate(statement, arguments(optional)) Executes a SQL statement, which changes the database state. SELECT and CALL statements are not allowed here. The query string is prepared and the additional arguments are applied as statement parameters, before the statement is executed. rollback() Rolls back the changes. setAutoCommit(enable) Changes the auto-commit flag of the connection $.hdb.ResultSet() Members Description Type lenght The number of rows in the $.hdb.ResultSet object number metadata Returns the ResultSetMetaData from $.hdb.ResultSet object. ResultSetMetaData Method Description Type getIterator() Returns an iterator over this result set. ResultSetIterator $.hdb.ResultSetIterator Method Description Type next() Checks if the underlying $.hdb.ResultSet has more rows and sets the value of the iterator to the next row if it exists. Boolean value() Returns the current row that the iterator's value is set to. Should always be called after a call to next(); Row of a $.hdb.ResultSet. $.hdb.ResultSetMetaData Represents the metadata of a result set. Members Description Type column Returns an array of $.hdb.ColumnMetadata objects, each of which represents the metadata for a particular column. Array $.hdb. ColumnMetadata Represents the metadata of a single column from a result set. Sample usage: var conn = $ . hdb . getConnection (); conn . executeUpdate ( 'CREATE SCHEMA EXAMPLE' ); conn . executeUpdate ( 'CREATE TABLE EXAMPLE.TEST_METADATA( TINT TINYINT NOT NULL, FLOAT FLOAT )' ); conn . executeUpdate ( 'INSERT INTO EXAMPLE.TEST_METADATA VALUES(12, 34.5)' ); conn . commit (); var resultSet = conn . executeQuery ( 'SELECT * FROM EXAMPLE.TEST_METADATA' ); var columnsMetadata = resultSet . metadata . columns ; var columnCount = columnsMetadata . length ; var body = \"\" ; for ( var i = 0 ; i < columnCount ; i ++ ) { body += \"Column \" + ( i + 1 ) + \" metadata:\\n\" ; body += \" Catalog name: \" + columnsMetadata [ i ]. catalogName + \"\\n\" ; body += \" Display size: \" + columnsMetadata [ i ]. displaySize + \"\\n\" ; body += \" Label: \" + columnsMetadata [ i ]. label + \"\\n\" ; body += \" Name: \" + columnsMetadata [ i ]. name + \"\\n\" ; body += \" Type: \" + columnsMetadata [ i ]. type + \"\\n\" ; body += \" Type name: \" + columnsMetadata [ i ]. typeName + \"\\n\" ; body += \" Precision: \" + columnsMetadata [ i ]. precision + \"\\n\" ; body += \" Scale: \" + columnsMetadata [ i ]. scale + \"\\n\" ; body += \" Table name: \" + columnsMetadata [ i ]. tableName + \"\\n\" ; body += \" Is nullable: \" + ( columnsMetadata [ i ]. isNullable ? \"true\" : \"false\" ) + \"\\n\\n\" ; } conn . executeUpdate ( 'DROP TABLE EXAMPLE.TEST_METADATA' ); conn . executeUpdate ( 'DROP SCHEMA EXAMPLE' ); $ . response . contentType = \"text/plain\" ; $ . response . setBody ( body ); Members Description Type catalogName Returns the column's catalog name. String displaySize Returns the column's display size. Number isNullable Returns true if the column is nullable and false otherwise. Number label Returns the column's label. String precision Returns the column's name. String scale Returns the column's scale. String tableName Returns the name of the table to which the column belongs. String type Returns the column's type. String typeName Returns the column's type name. $.hdb.types","title":"$.hdb"},{"location":"api/%24.hdb/#hdb","text":"$.hdb namespace provides means for seamless HANA database access. It is intended to be a replacement for the older $.db namespace. The fundamental goal of the new interface is to ensure simplicity, convenience, completeness, and performance. Overview Definition: https://github.com/SAP/xsk/issues/14 Module: hdb/hdb.js","title":"$.hdb"},{"location":"api/%24.hdb/#basic-usage","text":"var db = $ . hdb ; var response = require ( 'http/v4/response' ); var tableName = \"CARS\" ; try { var connection = db . getConnection (); // Make sure to create the table only once connection . executeUpdate ( \"CREATE TABLE \" + tableName + \" (MAKE varchar(255), MODEL varchar(255))\" ); var rows = connection . executeUpdate ( \"INSERT INTO \" + tableName + \" (MAKE, MODEL) VALUES ('BMW', '325'), ('HONDA', 'ACCORD');\" ); response . println ( \"Query OK, \" + rows + \" rows affected\\n\" ); var result = connection . executeQuery ( 'SELECT * FROM ' + tableName ); var iterator = result . getIterator (); var metadata = result . metadata . columns ; var columnCount = metadata . length ; var totalText = \"\" ; while ( iterator . next ()) { var currentRow = iterator . value (); var text = \"\\n\" + metadata [ 0 ]. name + \": \" + currentRow [ metadata [ 0 ]. name ] + \"\\n\" + metadata [ 1 ]. name + \": \" + currentRow [ metadata [ 1 ]. name ] + \"\\n\" ; response . println ( text ); } } catch ( e ) { connection . rollback (); response . println ( \"Transaction was rolled back: \" + e . message ); } finally { connection . close (); } response . flush (); response . close ();","title":"Basic Usage"},{"location":"api/%24.hdb/#coverage","text":"","title":"Coverage"},{"location":"api/%24.hdb/#hdb_1","text":"Method Description getConnection() Returns a connection to the database","title":"$.hdb"},{"location":"api/%24.hdb/#members","text":"Members Description Type isolation Constants that represent the isolation levels for a transaction types Set of constants of the database column types. The JavaScript Type column below describes the implicit Database to JavaScript type convertions performed by the $.hdb API","title":"Members"},{"location":"api/%24.hdb/#isolation-properties","text":"Name Type Default READ_COMITTED number 2 REPEATABLE_READ number 4 SERIALIZABLE number 8","title":"Isolation Properties"},{"location":"api/%24.hdb/#types","text":"Name Value JavaScript Type Comment TINYINT 1 Number SMALLINT 2 Number INTEGER 3 Number BIGINT 4 ctypes.Int64 DECIMAL 5 String REAL 6 Number DOUBLE 7 Number CHAR 8 String VARCHAR 9 String NCHAR 10 String NVARCHAR 11 String BINARY 12 ArrayBuffer VARBINARY 13 ArrayBuffer DATE 14 Date TIME 15 Date TIMESTAMP 16 Date CLOB 25 String NCLOB 26 String BLOB 27 ArrayBuffer SMALLDECIMAL 47 String TEXT 51 ArrayBuffer SHORTTEXT 52 String ALPHANUM 55 String SECONDDATE 62 Date ST_GEOMETRY 74 ArrayBuffer consider using SQL's ST_asGeoJSON() on ST_GEOMETRY columns for easy consumption ST_POINT 75 ArrayBuffer consider using SQL's ST_asGeoJSON() on ST_POINT columns for easy consumption","title":"Types"},{"location":"api/%24.hdb/#hdbconnection","text":"Method Description close() Closes the connection. commit() Commits the changes. isClosed() Checks if the connection is closed. executeQuery(query, arguments(optional)) Executes a database query. The query string is prepared and the additional arguments are applied as statement parameters, before the statement is executed. executeUpdate(statement, arguments(optional)) Executes a SQL statement, which changes the database state. SELECT and CALL statements are not allowed here. The query string is prepared and the additional arguments are applied as statement parameters, before the statement is executed. rollback() Rolls back the changes. setAutoCommit(enable) Changes the auto-commit flag of the connection","title":"$.hdb.Connection"},{"location":"api/%24.hdb/#hdbresultset","text":"Members Description Type lenght The number of rows in the $.hdb.ResultSet object number metadata Returns the ResultSetMetaData from $.hdb.ResultSet object. ResultSetMetaData Method Description Type getIterator() Returns an iterator over this result set. ResultSetIterator","title":"$.hdb.ResultSet()"},{"location":"api/%24.hdb/#hdbresultsetiterator","text":"Method Description Type next() Checks if the underlying $.hdb.ResultSet has more rows and sets the value of the iterator to the next row if it exists. Boolean value() Returns the current row that the iterator's value is set to. Should always be called after a call to next(); Row of a $.hdb.ResultSet.","title":"$.hdb.ResultSetIterator"},{"location":"api/%24.hdb/#hdbresultsetmetadata","text":"Represents the metadata of a result set. Members Description Type column Returns an array of $.hdb.ColumnMetadata objects, each of which represents the metadata for a particular column. Array","title":"$.hdb.ResultSetMetaData"},{"location":"api/%24.hdb/#hdb-columnmetadata","text":"Represents the metadata of a single column from a result set. Sample usage: var conn = $ . hdb . getConnection (); conn . executeUpdate ( 'CREATE SCHEMA EXAMPLE' ); conn . executeUpdate ( 'CREATE TABLE EXAMPLE.TEST_METADATA( TINT TINYINT NOT NULL, FLOAT FLOAT )' ); conn . executeUpdate ( 'INSERT INTO EXAMPLE.TEST_METADATA VALUES(12, 34.5)' ); conn . commit (); var resultSet = conn . executeQuery ( 'SELECT * FROM EXAMPLE.TEST_METADATA' ); var columnsMetadata = resultSet . metadata . columns ; var columnCount = columnsMetadata . length ; var body = \"\" ; for ( var i = 0 ; i < columnCount ; i ++ ) { body += \"Column \" + ( i + 1 ) + \" metadata:\\n\" ; body += \" Catalog name: \" + columnsMetadata [ i ]. catalogName + \"\\n\" ; body += \" Display size: \" + columnsMetadata [ i ]. displaySize + \"\\n\" ; body += \" Label: \" + columnsMetadata [ i ]. label + \"\\n\" ; body += \" Name: \" + columnsMetadata [ i ]. name + \"\\n\" ; body += \" Type: \" + columnsMetadata [ i ]. type + \"\\n\" ; body += \" Type name: \" + columnsMetadata [ i ]. typeName + \"\\n\" ; body += \" Precision: \" + columnsMetadata [ i ]. precision + \"\\n\" ; body += \" Scale: \" + columnsMetadata [ i ]. scale + \"\\n\" ; body += \" Table name: \" + columnsMetadata [ i ]. tableName + \"\\n\" ; body += \" Is nullable: \" + ( columnsMetadata [ i ]. isNullable ? \"true\" : \"false\" ) + \"\\n\\n\" ; } conn . executeUpdate ( 'DROP TABLE EXAMPLE.TEST_METADATA' ); conn . executeUpdate ( 'DROP SCHEMA EXAMPLE' ); $ . response . contentType = \"text/plain\" ; $ . response . setBody ( body ); Members Description Type catalogName Returns the column's catalog name. String displaySize Returns the column's display size. Number isNullable Returns true if the column is nullable and false otherwise. Number label Returns the column's label. String precision Returns the column's name. String scale Returns the column's scale. String tableName Returns the name of the table to which the column belongs. String type Returns the column's type. String typeName Returns the column's type name. $.hdb.types","title":"$.hdb. ColumnMetadata"},{"location":"api/%24.import/","text":"$.import Imports a server-side JavaScript library artifact. The library is a design-time artifact located in the repository. JavaScript library design-time artifacts have the suffix '.xsjslib'. Overview Definition: https://github.com/SAP/xsk/issues/18 Module: import/import.js Basic usage: in xsk : root/ |-- sap |--myapp |--lib |--math.xsjslib Parameters: Name type Description package string The name of the package in which the library object is located library string The name of the library object in the repository (without the suffix .xsjslib) // import .xsjslib to our file using $.import api (\"package\",\"library\") //in our case package equals \"sap.myapp.lib\" var mathlib = $ . import ( \"sap.myapp.lib\" , \"math\" ); var response = require ( 'http/v4/response' ); var square = mathlib . square ( 6 ); var multiply = mathlib . multiply ( 4 , 9 ); var division = mathlib . division ( 9 , 3 ); response . print ( \"number is \" + square ); response . print ( \"devision = \" + division ); response . print ( \"multiply = \" + multiply );","title":"$.import"},{"location":"api/%24.import/#import","text":"Imports a server-side JavaScript library artifact. The library is a design-time artifact located in the repository. JavaScript library design-time artifacts have the suffix '.xsjslib'. Overview Definition: https://github.com/SAP/xsk/issues/18 Module: import/import.js","title":"$.import"},{"location":"api/%24.import/#basic-usage","text":"in xsk : root/ |-- sap |--myapp |--lib |--math.xsjslib Parameters: Name type Description package string The name of the package in which the library object is located library string The name of the library object in the repository (without the suffix .xsjslib) // import .xsjslib to our file using $.import api (\"package\",\"library\") //in our case package equals \"sap.myapp.lib\" var mathlib = $ . import ( \"sap.myapp.lib\" , \"math\" ); var response = require ( 'http/v4/response' ); var square = mathlib . square ( 6 ); var multiply = mathlib . multiply ( 4 , 9 ); var division = mathlib . division ( 9 , 3 ); response . print ( \"number is \" + square ); response . print ( \"devision = \" + division ); response . print ( \"multiply = \" + multiply );","title":"Basic usage:"},{"location":"api/%24.net.http/","text":"$.net.http $.net.http represents the http namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha Basic Usage let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Path Prefix: \" + dest . pathPrefix ); // create client let client = new http . Client (); let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // set the timeout in seconds client . setTimeout ( 10 ); // send the request and synchronously get the response client . request ( request , dest ); let response = client . getResponse (); // get all the cookies and headers from the response let co = [], he = []; for ( let c in response . cookies ) { co . push ( response . cookies [ c ]); } for ( let c in response . headers ) { he . push ( response . headers [ c ]); } // get the body let body ; if ( ! response . body ) body = \"\" ; else body = response . body ; // close the connection client . close (); // prevent socket leak - see xsengine.ini: [communication] - max_open_sockets_per_request // check the contents of the response response_prev . println ( \"status: \" + response . status + \" cookies: \" + co + \" headers: \" + he + \" body: \" + body ); Classes Classes Description Destination Contains metadata, for example, host name, port number and custom values. Client HTTP(s) Client for outbound connectivity. This client supports HTTP and HTTPs connections over HTTP or SOCKS proxy. Request Request class to be used with HTTP client. Functions Function Description Returns readDestination(package, objectName) Returns the HTTP destination with the given name as a Destination object. $.net.http. Destination HTTP constants for methods Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8 HTTP constants for status codes Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"$.net.http"},{"location":"api/%24.net.http/#nethttp","text":"$.net.http represents the http namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/20 Module: http/http.js Status: alpha","title":"$.net.http"},{"location":"api/%24.net.http/#basic-usage","text":"let http = $ . net . http ; let response_prev = require ( 'http/v4/response' ); /* Read service.xshttpdest inside the Demo package that contains: host=https://services.odata.org; pathPrefix=/V4/Northwind/Northwind.svc/; */ let dest = http . readDestination ( \"Demo\" , \"service\" ); // Check if the file has been read properly response_prev . println ( \"Host: \" + dest . host + \" Path Prefix: \" + dest . pathPrefix ); // create client let client = new http . Client (); let request = new http . Request ( http . GET , \"/\" ); // new Request(METHOD, PATH) // the PATH will be prefixed by destination's pathPrefix, e.g. \"/search?\" on the request // set the timeout in seconds client . setTimeout ( 10 ); // send the request and synchronously get the response client . request ( request , dest ); let response = client . getResponse (); // get all the cookies and headers from the response let co = [], he = []; for ( let c in response . cookies ) { co . push ( response . cookies [ c ]); } for ( let c in response . headers ) { he . push ( response . headers [ c ]); } // get the body let body ; if ( ! response . body ) body = \"\" ; else body = response . body ; // close the connection client . close (); // prevent socket leak - see xsengine.ini: [communication] - max_open_sockets_per_request // check the contents of the response response_prev . println ( \"status: \" + response . status + \" cookies: \" + co + \" headers: \" + he + \" body: \" + body );","title":"Basic Usage"},{"location":"api/%24.net.http/#classes","text":"Classes Description Destination Contains metadata, for example, host name, port number and custom values. Client HTTP(s) Client for outbound connectivity. This client supports HTTP and HTTPs connections over HTTP or SOCKS proxy. Request Request class to be used with HTTP client.","title":"Classes"},{"location":"api/%24.net.http/#functions","text":"Function Description Returns readDestination(package, objectName) Returns the HTTP destination with the given name as a Destination object. $.net.http. Destination","title":"Functions"},{"location":"api/%24.net.http/#http-constants-for-methods","text":"Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8","title":"HTTP constants for methods"},{"location":"api/%24.net.http/#http-constants-for-status-codes","text":"Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"HTTP constants for status codes"},{"location":"api/%24.net/","text":"$.net $.net represents the network namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha Basic Usage let net = $ . net ; var response = require ( 'http/v4/response' ); // Create a mail Object let mail = new net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); let smtp = new net . SMTPConnection (); // Send the mail Object with SMPT smtp . send ( mail ); // Send the mail Object from the built-in send method. The send method is void in xsk. The response is mocked. let returnValue = mail . send (); let response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; // The result is mocked to prevent errors response . println ( response_msg ); Classes Classes Description Mail Class for constructing and sending multipart emails. SMTPConnection Class for sending $.net.Mail objects via SMTP connection. Destination Contains metadata, for example, host name and port number. Properties Name Description Type http Provides access to the http API. $.net.http HTTP constants for methods Example let constantVal = $ . net . http . OPTIONS ; Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8 HTTP constants for status codes Example let statusCode = $ . net . http . CONTINUE ; Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"$.net"},{"location":"api/%24.net/#net","text":"$.net represents the network namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/19 Module: net/net.js Status: alpha","title":"$.net"},{"location":"api/%24.net/#basic-usage","text":"let net = $ . net ; var response = require ( 'http/v4/response' ); // Create a mail Object let mail = new net . Mail ({ sender : { address : \"sender@sap.com\" }, to : [{ name : \"John Doe\" , address : \"john.doe@sap.com\" , nameEncoding : \"US-ASCII\" }, { name : \"Jane Doe\" , address : \"jane.doe@sap.com\" }], cc : [ \"cc1@sap.com\" , { address : \"cc2@sap.com\" }], bcc : [{ name : \"Jonnie Doe\" , address : \"jonnie.doe@sap.com\" }], subject : \"subject\" , subjectEncoding : \"UTF-8\" , parts : [ new net . Mail . Part ({ type : net . Mail . Part . TYPE_TEXT , text : \"The body of the mail.\" , contentType : \"text/plain\" , encoding : \"UTF-8\" , })] }); let smtp = new net . SMTPConnection (); // Send the mail Object with SMPT smtp . send ( mail ); // Send the mail Object from the built-in send method. The send method is void in xsk. The response is mocked. let returnValue = mail . send (); let response_msg = \"MessageId = \" + returnValue . messageId + \", final reply = \" + returnValue . finalReply ; // The result is mocked to prevent errors response . println ( response_msg );","title":"Basic Usage"},{"location":"api/%24.net/#classes","text":"Classes Description Mail Class for constructing and sending multipart emails. SMTPConnection Class for sending $.net.Mail objects via SMTP connection. Destination Contains metadata, for example, host name and port number.","title":"Classes"},{"location":"api/%24.net/#properties","text":"Name Description Type http Provides access to the http API. $.net.http","title":"Properties"},{"location":"api/%24.net/#http-constants-for-methods","text":"","title":"HTTP constants for methods"},{"location":"api/%24.net/#example","text":"let constantVal = $ . net . http . OPTIONS ; Name Description Type Default OPTIONS HTTP Method OPTIONS. number 0 GET HTTP Method GET. number 1 HEAD HTTP Method HEAD. number 2 POST HTTP Method POST. number 3 PUT HTTP Method PUT. number 4 DEL HTTP Method DEL. number 5 TRACE HTTP Method TRACE. number 6 CONNECT HTTP Method CONNECT. number 7 PATCH HTTP Method PATCH. number 8","title":"Example"},{"location":"api/%24.net/#http-constants-for-status-codes","text":"","title":"HTTP constants for status codes"},{"location":"api/%24.net/#example_1","text":"let statusCode = $ . net . http . CONTINUE ; Name Type Default CONTINUE number 100 SWITCH_PROTOCOL number 101 OK number 200 CREATED number 201 ACCEPTED number 202 NON_AUTHORITATIVE number 203 NO_CONTENT number 204 RESET_CONTENT number 205 PARTIAL_CONTENT number 206 MULTIPLE_CHOICES number 300 MOVED_PERMANENTLY number 301 FOUND number 302 SEE_OTHER number 303 NOT_MODIFIED number 304 USE_PROXY number 305 TEMPORARY_REDIRECT number 307 BAD_REQUEST number 400 UNAUTHORIZED number 401 PAYMENT_REQUIRED number 402 FORBIDDEN number 403 NOT_FOUND number 404 METHOD_NOT_ALLOWED number 405 NOT_ACCEPTABLE number 406 PROXY_AUTH_REQUIRED number 407 REQUEST_TIMEOUT number 408 CONFLICT number 409 GONE number 410 LENGTH_REQUIRED number 411 PRECONDITION_FAILED number 412 REQUEST_ENTITY_TOO_LARGE number 413 REQUEST_URI_TOO_LONG number 414 UNSUPPORTED_MEDIA_TYPE number 415 REQUESTED_RANGE_NOT_SATISFIABLE number 416 EXPECTATION_FAILED number 417 INTERNAL_SERVER_ERROR number 500 NOT_YET_IMPLEMENTED number 501 BAD_GATEWAY number 502 SERVICE_UNAVAILABLE number 503 GATEWAY_TIMEOUT number 504 HTTP_VERSION_NOT_SUPPORTED number 505","title":"Example"},{"location":"api/%24.request/","text":"$.request $.request object represents the client HTTP request currently being processed. Overview Definition: https://github.com/SAP/xsk/issues/12 Module: web/web.js Status: alpha Basic Usage function getUser ( id ) { // retrieve user by id } function createUser ( data ) { // create user } function deleteUser ( id ) { // delete user } if ( /\\/?users$/ . test ( $ . request . queryPath )) { const id = $ . request . parameters . get ( \"id\" ); if ( $ . request . method === $ . net . http . PUT ) { if ( $ . request . contentType === \"application/json\" ) { createUser ( $ . request . body ); $ . response . setBody ( `created user [ ${ JSON . stringify ( $ . request . body . asString ()) } ]` ); } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Unsupported content type.\" })); } } else if ( id ) { switch ( $ . request . method ) { case $ . net . http . GET : getUser ( id ); $ . response . setBody ( `retrieved user with id ${ id } ` ); break ; case $ . net . http . DELETE : deleteUser ( id ); $ . response . setBody ( `deleted user with id [ ${ id } ]` ); break ; default : $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported method [ ${ $ . request . method } ]` })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Missing required parameter [id]\" })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported query path [ ${ $ . request . queryPath } ]` })); } Properties Name Description Type body The body of the request. $.web.Body contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList language Language of the request in IETF (BCP 47) format. string method The HTTP method of the incoming HTTP request. $.net.http parameters The parameters of the entity. $.web.TupelList path The URL path specified in the request. string queryPath The URL query path specified in the request. string Functions Function Description Returns setBody(body) Sets the body of the entity. -","title":"$.request"},{"location":"api/%24.request/#request","text":"$.request object represents the client HTTP request currently being processed. Overview Definition: https://github.com/SAP/xsk/issues/12 Module: web/web.js Status: alpha","title":"$.request"},{"location":"api/%24.request/#basic-usage","text":"function getUser ( id ) { // retrieve user by id } function createUser ( data ) { // create user } function deleteUser ( id ) { // delete user } if ( /\\/?users$/ . test ( $ . request . queryPath )) { const id = $ . request . parameters . get ( \"id\" ); if ( $ . request . method === $ . net . http . PUT ) { if ( $ . request . contentType === \"application/json\" ) { createUser ( $ . request . body ); $ . response . setBody ( `created user [ ${ JSON . stringify ( $ . request . body . asString ()) } ]` ); } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Unsupported content type.\" })); } } else if ( id ) { switch ( $ . request . method ) { case $ . net . http . GET : getUser ( id ); $ . response . setBody ( `retrieved user with id ${ id } ` ); break ; case $ . net . http . DELETE : deleteUser ( id ); $ . response . setBody ( `deleted user with id [ ${ id } ]` ); break ; default : $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported method [ ${ $ . request . method } ]` })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : \"Missing required parameter [id]\" })); } } else { $ . response . setBody ( JSON . stringify ({ \"error\" : `Unsupported query path [ ${ $ . request . queryPath } ]` })); }","title":"Basic Usage"},{"location":"api/%24.request/#properties","text":"Name Description Type body The body of the request. $.web.Body contentType The content type of the entity. string cookies The cookies associated with the entity. $.web.TupelList entities The sub-entities of the entity. $.web.EntityList headers The headers of the entity. $.web.TupelList language Language of the request in IETF (BCP 47) format. string method The HTTP method of the incoming HTTP request. $.net.http parameters The parameters of the entity. $.web.TupelList path The URL path specified in the request. string queryPath The URL query path specified in the request. string","title":"Properties"},{"location":"api/%24.request/#functions","text":"Function Description Returns setBody(body) Sets the body of the entity. -","title":"Functions"},{"location":"api/%24.session/","text":"$.session $.session represents the Session with its fields and methods. Overview Definition: https://github.com/SAP/xsk/issues/11 Module: session/session.js Status: alpha Basic Usage var session = $ . session ; var response = require ( 'http/v4/response' ); var username = session . getUsername () var timeout = session . getTimeout () var token = session . getSecurityToken () var authType = session . authType // Check the language of the session response . println ( \"Session language: \" + session . language ) // Check if a particular user has the \"Administrator\" role if ( username === \"dirigible\" && session . hasAppPrivilege ( \"Administrator\" )) { // Check a specific system privilege for that user if ( session . hasSystemPrivilege ( \"Dirigible\" )) { // Perform some operation with his session's information response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } else { // Assert that the user is a Developer in all other cases try { session . assertAppPrivilege ( \"Developer\" ); // Check the authentification type if ( authType === \"BASIC\" ) { // Use the information from the current session response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } catch ( error ) { //Display the missing role that was being asserted response . println ( \"User does not have the role: \" + error . privilege ) } } // After all calls are complete, check the invocation count of the current session response . println ( \"Invocation count: \" + session . getInvocationCount ()); Properties Name Description Type authType Authentication method that was used for the current session. string/null language Language of the session in IETF (BCP 47) format. string samlAttribute Provides the detailed content of the AttributeStatement tag which can be part of a SAML assertion. Array.<$.Session~SamlAttributeObject> samlUserInfo Provides the materialized content of the AttributeStatement tag which can be part of a SAML assertion. object Functions Function Description Returns assertAppPrivilege(privilegeName) Asserts that the logged-on user has a specified application privilege. - assertSystemPrivilege(privilegeName) Asserts that the logged-on user has a specified system privilege. - getInvocationCount() Returns the number of requests sent to the current session. Number getSecurityToken() Returns unique session-specific token that could be used for XSRF prevention. string getTimeout() The timeout of the XS session in seconds. integer getUsername() Returns the username of the logged-on database user. string hasAppPrivilege(privilegeName) Checks whether the logged-on user has a specified application privilege. boolean hasSystemPrivilege(privilegeName) Checks whether the logged-on user has a specified system privilege. boolean","title":"$.session"},{"location":"api/%24.session/#session","text":"$.session represents the Session with its fields and methods. Overview Definition: https://github.com/SAP/xsk/issues/11 Module: session/session.js Status: alpha","title":"$.session"},{"location":"api/%24.session/#basic-usage","text":"var session = $ . session ; var response = require ( 'http/v4/response' ); var username = session . getUsername () var timeout = session . getTimeout () var token = session . getSecurityToken () var authType = session . authType // Check the language of the session response . println ( \"Session language: \" + session . language ) // Check if a particular user has the \"Administrator\" role if ( username === \"dirigible\" && session . hasAppPrivilege ( \"Administrator\" )) { // Check a specific system privilege for that user if ( session . hasSystemPrivilege ( \"Dirigible\" )) { // Perform some operation with his session's information response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } else { // Assert that the user is a Developer in all other cases try { session . assertAppPrivilege ( \"Developer\" ); // Check the authentification type if ( authType === \"BASIC\" ) { // Use the information from the current session response . println ( \"Username: \" + username + \" with session authentication type: \" + authType + \" token: \" + token + \" and timeout \" + timeout ); } } catch ( error ) { //Display the missing role that was being asserted response . println ( \"User does not have the role: \" + error . privilege ) } } // After all calls are complete, check the invocation count of the current session response . println ( \"Invocation count: \" + session . getInvocationCount ());","title":"Basic Usage"},{"location":"api/%24.session/#properties","text":"Name Description Type authType Authentication method that was used for the current session. string/null language Language of the session in IETF (BCP 47) format. string samlAttribute Provides the detailed content of the AttributeStatement tag which can be part of a SAML assertion. Array.<$.Session~SamlAttributeObject> samlUserInfo Provides the materialized content of the AttributeStatement tag which can be part of a SAML assertion. object","title":"Properties"},{"location":"api/%24.session/#functions","text":"Function Description Returns assertAppPrivilege(privilegeName) Asserts that the logged-on user has a specified application privilege. - assertSystemPrivilege(privilegeName) Asserts that the logged-on user has a specified system privilege. - getInvocationCount() Returns the number of requests sent to the current session. Number getSecurityToken() Returns unique session-specific token that could be used for XSRF prevention. string getTimeout() The timeout of the XS session in seconds. integer getUsername() Returns the username of the logged-on database user. string hasAppPrivilege(privilegeName) Checks whether the logged-on user has a specified application privilege. boolean hasSystemPrivilege(privilegeName) Checks whether the logged-on user has a specified system privilege. boolean","title":"Functions"},{"location":"api/%24.trace/","text":"$.trace $.trace represents the trace namespace with its methods. Overview Definition: https://github.com/SAP/xsk/issues/17 Module: trace/trace.js Status: alpha Basic Usage let trace = $ . trace ; let response = require ( 'http/v4/response' ); // Check trace methods availability in the \"Preview\" tab response . println ( \"Debug logging enabled: \" + trace . isDebugEnabled ()); response . println ( \"Error logging enabled: \" + trace . isErrorEnabled ()); response . println ( \"Fatal logging enabled: \" + trace . isFatalEnabled ()); response . println ( \"Info logging enabled: \" + trace . isInfoEnabled ()); response . println ( \"Warning logging enabled: \" + trace . isWarningEnabled ()); // If the trace method is enabled, it will print the message in the \"Console\" tab trace . debug ( \"Debug message!\" ); trace . error ( \"Error message!\" ); trace . error ( \"Fatal message!\" ); trace . info ( \"Info message!\" ); trace . warning ( \"Warning message!\" ); Constants Name Description Type Default XSK_LOG_DEBUG_ENABLED Enables debug level logging. boolean true XSK_LOG_ERROR_ENABLED Enables error level logging. boolean true XSK_LOG_FATAL_ENABLED Enables fatal level logging. boolean true XSK_LOG_INFO_ENABLED Enables log level logging. boolean true XSK_LOG_WARNING_ENABLED Enables warning level logging. boolean true Functions Function Description Returns debug(message) Writes the given message with the trace-level debug to the application trace file. - error(message) Writes the given message with the trace-level error to the application trace file. - fatal(message) Writes the given message with the trace-level fatal to the application trace file. - info(message) Writes the given message with the trace-level info to the application trace file. - warning(message) Writes the given message with the trace-level warning to the application trace file. - isDebugEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level debug. boolean isErrorEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level error. boolean isFatalEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level fatal. boolean isInfoEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level info. boolean isWarningEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level warning. boolean","title":"$.trace"},{"location":"api/%24.trace/#trace","text":"$.trace represents the trace namespace with its methods. Overview Definition: https://github.com/SAP/xsk/issues/17 Module: trace/trace.js Status: alpha","title":"$.trace"},{"location":"api/%24.trace/#basic-usage","text":"let trace = $ . trace ; let response = require ( 'http/v4/response' ); // Check trace methods availability in the \"Preview\" tab response . println ( \"Debug logging enabled: \" + trace . isDebugEnabled ()); response . println ( \"Error logging enabled: \" + trace . isErrorEnabled ()); response . println ( \"Fatal logging enabled: \" + trace . isFatalEnabled ()); response . println ( \"Info logging enabled: \" + trace . isInfoEnabled ()); response . println ( \"Warning logging enabled: \" + trace . isWarningEnabled ()); // If the trace method is enabled, it will print the message in the \"Console\" tab trace . debug ( \"Debug message!\" ); trace . error ( \"Error message!\" ); trace . error ( \"Fatal message!\" ); trace . info ( \"Info message!\" ); trace . warning ( \"Warning message!\" );","title":"Basic Usage"},{"location":"api/%24.trace/#constants","text":"Name Description Type Default XSK_LOG_DEBUG_ENABLED Enables debug level logging. boolean true XSK_LOG_ERROR_ENABLED Enables error level logging. boolean true XSK_LOG_FATAL_ENABLED Enables fatal level logging. boolean true XSK_LOG_INFO_ENABLED Enables log level logging. boolean true XSK_LOG_WARNING_ENABLED Enables warning level logging. boolean true","title":"Constants"},{"location":"api/%24.trace/#functions","text":"Function Description Returns debug(message) Writes the given message with the trace-level debug to the application trace file. - error(message) Writes the given message with the trace-level error to the application trace file. - fatal(message) Writes the given message with the trace-level fatal to the application trace file. - info(message) Writes the given message with the trace-level info to the application trace file. - warning(message) Writes the given message with the trace-level warning to the application trace file. - isDebugEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level debug. boolean isErrorEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level error. boolean isFatalEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level fatal. boolean isInfoEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level info. boolean isWarningEnabled() Returns true or false to show whether or not the tracer writes an entry in the application trace file for the trace-level warning. boolean","title":"Functions"},{"location":"api/%24.util/","text":"$.util Overview Definition: https://github.com/SAP/xsk/issues/16 Module: util/util.js Basic Usage var util = $ . util ; var randomID = util . createUuid (); // return random uuid // Uint8Array var arrayBuffer = [ 84 , 104 , 105 , 115 , 32 , 105 , 115 , 32 , 97 , 32 , 85 , 105 , 110 , 116 , 56 , 65 , 114 , 114 , 97 , 121 , 32 , 99 , 111 , 110 , 118 , 101 , 114 , 116 , 101 , 100 , 32 , 116 , 111 , 32 , 97 , 32 , 115 , 116 , 114 , 105 , 110 , 103 ]; var convertedBuff = util . stringify ( arrayBuffer ); // return converted arrayBuffer to String * Methods Members Description Type createUuid() Returns a unique UUID. String stringify(data) Recieves UintArray and return converted value. String","title":"$.util"},{"location":"api/%24.util/#util","text":"Overview Definition: https://github.com/SAP/xsk/issues/16 Module: util/util.js","title":"$.util"},{"location":"api/%24.util/#basic-usage","text":"var util = $ . util ; var randomID = util . createUuid (); // return random uuid // Uint8Array var arrayBuffer = [ 84 , 104 , 105 , 115 , 32 , 105 , 115 , 32 , 97 , 32 , 85 , 105 , 110 , 116 , 56 , 65 , 114 , 114 , 97 , 121 , 32 , 99 , 111 , 110 , 118 , 101 , 114 , 116 , 101 , 100 , 32 , 116 , 111 , 32 , 97 , 32 , 115 , 116 , 114 , 105 , 110 , 103 ]; var convertedBuff = util . stringify ( arrayBuffer ); // return converted arrayBuffer to String * Methods Members Description Type createUuid() Returns a unique UUID. String stringify(data) Recieves UintArray and return converted value. String","title":"Basic Usage"},{"location":"api/%24util.codec/","text":"$.util.codec $.util.codec object represents the codec namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/21 Module: util/codec/codec.js Basic Usage Sample usage: var codec = $ . util . codec ; var util = $ . util ; // encode the string value to hex data var encodedHex = codec . encodeHex ( \"dirigible as hex\" ); //returns ArrayBuffer var decodedHex = codec . decodeHex ( encodedHex ); //Converts an ArrayBuffer containing UTF-8 encoded string to a JavaScript String object var valueFromHex = util . stringify ( decodedHex ); // encode the string value base64 data var encodedToBase64 = codec . encodeBase64 ( \"dirigible as base64\" ); //returns ArrayBuffer var decodedBase64 = codec . decodeBase64 ( encodedToBase64 ); //Converts an ArrayBuffer containing UTF-8 encoded string to a JavaScript String object var valueFromBase64 = util . stringify ( decodedBase64 ); Methods Members Description Type decodeBase64(base64Data) Decodes Base64 data ArrayBuffer decodeHex(hexData) Decodes hexadecimal data. ArrayBuffer encodeBase64(data) Encodes data into Base64. String encodeHex(data) Encodes data into hexadecimal format. String","title":"$.util.codec"},{"location":"api/%24util.codec/#utilcodec","text":"$.util.codec object represents the codec namespace with its fields. Overview Definition: https://github.com/SAP/xsk/issues/21 Module: util/codec/codec.js","title":"$.util.codec"},{"location":"api/%24util.codec/#basic-usage","text":"Sample usage: var codec = $ . util . codec ; var util = $ . util ; // encode the string value to hex data var encodedHex = codec . encodeHex ( \"dirigible as hex\" ); //returns ArrayBuffer var decodedHex = codec . decodeHex ( encodedHex ); //Converts an ArrayBuffer containing UTF-8 encoded string to a JavaScript String object var valueFromHex = util . stringify ( decodedHex ); // encode the string value base64 data var encodedToBase64 = codec . encodeBase64 ( \"dirigible as base64\" ); //returns ArrayBuffer var decodedBase64 = codec . decodeBase64 ( encodedToBase64 ); //Converts an ArrayBuffer containing UTF-8 encoded string to a JavaScript String object var valueFromBase64 = util . stringify ( decodedBase64 ); Methods Members Description Type decodeBase64(base64Data) Decodes Base64 data ArrayBuffer decodeHex(hexData) Decodes hexadecimal data. ArrayBuffer encodeBase64(data) Encodes data into Base64. String encodeHex(data) Encodes data into hexadecimal format. String","title":"Basic Usage"},{"location":"setup/","text":"Local Setup Deploy XSK in Docker. Prerequisites Install Docker . Steps Start the container: Run docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest with Mounted Volume docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ -v <your-local-directory>:/usr/local/tomcat/target \\ dirigiblelabs/xsk:latest with HANA Cloud docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest \\ -e DIRIGIBLE_DATABASE_PROVIDER=custom \\ -e DIRIGIBLE_DATABASE_CUSTOM_DATASOURCES=HANA \\ -e DIRIGIBLE_DATABASE_DATASOURCE_NAME_DEFAULT=HANA \\ -e HANA_DRIVER=com.sap.db.jdbc.Driver \\ -e HANA_URL=jdbc:sap://<hanaHost>?encrypt=true&validateCertificate=true \\ -e HANA_USERNAME=<hanaUsername> \\ -e HANA_PASSWORD=<hanaPassword> Note Replace the <hanaHost> placeholder with the HANA Cloud host that will be used. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Windows For Windows setup, issues may appear with the way the environment variables ( -e XXX=YYY ) are provided. Either they should be properly escaped, or they could be supplied as *.env file : docker run --name xsk \\ --env-file env-variables.env \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest XSK versions Instead of using the latest tag (version), for production and development use cases it is recomended to use a stable release version: All released versions can be found here . All XSK Docker images and tags (versions) can be found here . Open a web browser and go to: http://localhost:8080/ Note The default user name and password are dirigible/dirigible Stop the container: docker stop dirigible","title":"Local"},{"location":"setup/#local-setup","text":"Deploy XSK in Docker. Prerequisites Install Docker .","title":"Local Setup"},{"location":"setup/#steps","text":"Start the container: Run docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest with Mounted Volume docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ -v <your-local-directory>:/usr/local/tomcat/target \\ dirigiblelabs/xsk:latest with HANA Cloud docker run --name xsk \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest \\ -e DIRIGIBLE_DATABASE_PROVIDER=custom \\ -e DIRIGIBLE_DATABASE_CUSTOM_DATASOURCES=HANA \\ -e DIRIGIBLE_DATABASE_DATASOURCE_NAME_DEFAULT=HANA \\ -e HANA_DRIVER=com.sap.db.jdbc.Driver \\ -e HANA_URL=jdbc:sap://<hanaHost>?encrypt=true&validateCertificate=true \\ -e HANA_USERNAME=<hanaUsername> \\ -e HANA_PASSWORD=<hanaPassword> Note Replace the <hanaHost> placeholder with the HANA Cloud host that will be used. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Windows For Windows setup, issues may appear with the way the environment variables ( -e XXX=YYY ) are provided. Either they should be properly escaped, or they could be supplied as *.env file : docker run --name xsk \\ --env-file env-variables.env \\ --rm -p 8080:8080 -p 8081:8081 \\ dirigiblelabs/xsk:latest XSK versions Instead of using the latest tag (version), for production and development use cases it is recomended to use a stable release version: All released versions can be found here . All XSK Docker images and tags (versions) can be found here . Open a web browser and go to: http://localhost:8080/ Note The default user name and password are dirigible/dirigible Stop the container: docker stop dirigible","title":"Steps"},{"location":"setup/cloud-foundry/","text":"Setup in Cloud Foundry Deploy XSK in SAP BTP 1 , Cloud Foundry environment. Prerequisites Install Cloud Foundry Command Line Interface . Access to SAP BTP account (the Trial landscape can be accessed here ). Create HANA Cloud service instance in SAP BTP Cloud Foundry space. Create a separate HANA Cloud user that will be used from the XSK engine. Steps Set the SAP BTP Cloud Foundry API host: cf api <cloud-foundry-api-host> Log in to the SAP BTP, Cloud Foundry environment with: cf login Create XSUAA service instance: Copy and paste the following content into xs-security.json : { \"xsappname\" : \"<applicationName>-xsuaa\" , \"tenant-mode\" : \"shared\" , \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <applicationName> placeholder with your application name, e.g. xsk . Create a XSUAA service instance: cf create-service xsuaa application <applicationName>-xsuaa -c xs-security.json Note Use the same <applicationName> as in the previous step. Deploy XSK: Docker cf push xsk \\ --docker-image=dirigiblelabs/xsk-cf:latest \\ --hostname xsk-<org-name> \\ -m 2G -k 2G Note Replace the <org-name> placeholder with your subaccount's Subdomain value. XSK versions Instead of using the latest tag (version), for production and development use cases it is recomended to use a stable release version: All released versions can be found here . All XSK Docker images and tags (versions) can be found here . Bind the XSUAA and HANA Cloud service instances to the XSK deployment: cf bind-service xsk <applicationName>-xsuaa cf bind-service xsk <hanaCloudInstanceName> cf set-env xsk HANA_USERNAME <hanaCloudUsername> cf set-env xsk HANA_PASSWORD <hanaCloudPassword> Note Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Restart the xsk deployment: cf restart xsk Buildpack Download the sap-cf binaries from the downloads site: https://github.com/SAP/xsk/releases Unzip the downloaded archieve to extract the ROOT.war file. Create manifest.yaml file in the same directory where the ROOT.war is located: applications : - name : xsk host : xsk-<org-name> memory : 2G buildpack : sap_java_buildpack path : ROOT.war env : JBP_CONFIG_COMPONENTS : \"jres: ['com.sap.xs.java.buildpack.jdk.SAPMachineJDK']\" JBP_CONFIG_SAP_MACHINE_JRE : 'jre: { version: 11.+ }' HANA_USERNAME : <hanaUsername> HANA_PASSWORD : <hanaPassword> services : - <applicationName>-xsuaa - <hanaCloudInstanceName> Note Replace the <org-name> placeholder with your subaccount's Subdomain value. Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Deploy with: cf push Assign the Developer and Operator roles. Log in. Additional Materials Step-by-step tutorial can be found here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Cloud Foundry"},{"location":"setup/cloud-foundry/#setup-in-cloud-foundry","text":"Deploy XSK in SAP BTP 1 , Cloud Foundry environment. Prerequisites Install Cloud Foundry Command Line Interface . Access to SAP BTP account (the Trial landscape can be accessed here ). Create HANA Cloud service instance in SAP BTP Cloud Foundry space. Create a separate HANA Cloud user that will be used from the XSK engine.","title":"Setup in Cloud Foundry"},{"location":"setup/cloud-foundry/#steps","text":"Set the SAP BTP Cloud Foundry API host: cf api <cloud-foundry-api-host> Log in to the SAP BTP, Cloud Foundry environment with: cf login Create XSUAA service instance: Copy and paste the following content into xs-security.json : { \"xsappname\" : \"<applicationName>-xsuaa\" , \"tenant-mode\" : \"shared\" , \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <applicationName> placeholder with your application name, e.g. xsk . Create a XSUAA service instance: cf create-service xsuaa application <applicationName>-xsuaa -c xs-security.json Note Use the same <applicationName> as in the previous step. Deploy XSK: Docker cf push xsk \\ --docker-image=dirigiblelabs/xsk-cf:latest \\ --hostname xsk-<org-name> \\ -m 2G -k 2G Note Replace the <org-name> placeholder with your subaccount's Subdomain value. XSK versions Instead of using the latest tag (version), for production and development use cases it is recomended to use a stable release version: All released versions can be found here . All XSK Docker images and tags (versions) can be found here . Bind the XSUAA and HANA Cloud service instances to the XSK deployment: cf bind-service xsk <applicationName>-xsuaa cf bind-service xsk <hanaCloudInstanceName> cf set-env xsk HANA_USERNAME <hanaCloudUsername> cf set-env xsk HANA_PASSWORD <hanaCloudPassword> Note Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Restart the xsk deployment: cf restart xsk Buildpack Download the sap-cf binaries from the downloads site: https://github.com/SAP/xsk/releases Unzip the downloaded archieve to extract the ROOT.war file. Create manifest.yaml file in the same directory where the ROOT.war is located: applications : - name : xsk host : xsk-<org-name> memory : 2G buildpack : sap_java_buildpack path : ROOT.war env : JBP_CONFIG_COMPONENTS : \"jres: ['com.sap.xs.java.buildpack.jdk.SAPMachineJDK']\" JBP_CONFIG_SAP_MACHINE_JRE : 'jre: { version: 11.+ }' HANA_USERNAME : <hanaUsername> HANA_PASSWORD : <hanaPassword> services : - <applicationName>-xsuaa - <hanaCloudInstanceName> Note Replace the <org-name> placeholder with your subaccount's Subdomain value. Replace the <applicationName> placeholder with the application name used in the previous steps. Replace the <hanaUsername> placeholder with the HANA Cloud username that will be used. Replace the <hanaPassword> placeholder with the HANA Cloud password that will be used. Replace the <hanaCloudInstanceName> placeholder with the HANA Cloud service instance name that will be used. Deploy with: cf push Assign the Developer and Operator roles. Log in. Additional Materials Step-by-step tutorial can be found here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Steps"},{"location":"setup/helm/","text":"Setup with Helm You can deploy XSK via Helm Chart in a Kubernetes cluster. Prerequisites Helm Kubernetes Cluster on IaaS provider of your choice Steps Add the XSK Helm repository: helm repo add xsk https://www.xsk.io helm repo update Basic: helm install xsk xsk/xsk Access This will install XSK Deployment and Service with ClusterIP only. To access the XSK instance execute the command that was printed in the console. Example: export POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=xsk,app.kubernetes.io/instance=xsk\" -o jsonpath=\"{.items[0].metadata.name}\") echo \"Visit http://127.0.0.1:8080 to use your application\" kubectl --namespace default port-forward $POD_NAME 8080:8080 Navigate to: http://127.0.0.1:8080 Login with: dirigible / dirigible Kyma: Basic helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> This will install additionally an ApiRule and XSUAA ServiceInstance and ServiceBinding. The appropriate roles should be assigned to the user. PostgreSQL helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> \\ --set database.enabled=true This will install also PostgreSQL database with 1Gi storage and update the XSK datasource configuration to consume the database. Uninstall: helm uninstall xsk Configuration The following table lists all the configurable parameters expose by the XSK chart and their default values. Generic Name Description Default dirigible.image Custom Dirigible image \"\" image.repository Dirigible image repo dirigiblelabs/dirigible-all image.repositoryKyma Dirigible Kyma image repo dirigiblelabs/dirigible-sap-kyma image.repositoryKeycloak Dirigible Keycloak image repo dirigiblelabs/dirigible-keycloak image.pullPolicy Image pull policy IfNotPresent service.type Service type ClusterIP service.port Service port 8080 replicaCount Number of replicas 1 imagePullSecrets Image pull secrets [] nameOverride Name override \"\" fullnameOverride Fullname override \"\" podSecurityContext Pod security context {} nodeSelector Node selector {} tolerations Tolerations [] affinity Affinity {} resources Resources {}","title":"Helm"},{"location":"setup/helm/#setup-with-helm","text":"You can deploy XSK via Helm Chart in a Kubernetes cluster. Prerequisites Helm Kubernetes Cluster on IaaS provider of your choice","title":"Setup with Helm"},{"location":"setup/helm/#steps","text":"Add the XSK Helm repository: helm repo add xsk https://www.xsk.io helm repo update Basic: helm install xsk xsk/xsk Access This will install XSK Deployment and Service with ClusterIP only. To access the XSK instance execute the command that was printed in the console. Example: export POD_NAME=$(kubectl get pods --namespace default -l \"app.kubernetes.io/name=xsk,app.kubernetes.io/instance=xsk\" -o jsonpath=\"{.items[0].metadata.name}\") echo \"Visit http://127.0.0.1:8080 to use your application\" kubectl --namespace default port-forward $POD_NAME 8080:8080 Navigate to: http://127.0.0.1:8080 Login with: dirigible / dirigible Kyma: Basic helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> This will install additionally an ApiRule and XSUAA ServiceInstance and ServiceBinding. The appropriate roles should be assigned to the user. PostgreSQL helm install xsk xsk/xsk \\ --set kyma.enabled=true \\ --set kyma.apirule.host=<kyma-host> \\ --set database.enabled=true This will install also PostgreSQL database with 1Gi storage and update the XSK datasource configuration to consume the database. Uninstall: helm uninstall xsk","title":"Steps"},{"location":"setup/helm/#configuration","text":"The following table lists all the configurable parameters expose by the XSK chart and their default values.","title":"Configuration"},{"location":"setup/helm/#generic","text":"Name Description Default dirigible.image Custom Dirigible image \"\" image.repository Dirigible image repo dirigiblelabs/dirigible-all image.repositoryKyma Dirigible Kyma image repo dirigiblelabs/dirigible-sap-kyma image.repositoryKeycloak Dirigible Keycloak image repo dirigiblelabs/dirigible-keycloak image.pullPolicy Image pull policy IfNotPresent service.type Service type ClusterIP service.port Service port 8080 replicaCount Number of replicas 1 imagePullSecrets Image pull secrets [] nameOverride Name override \"\" fullnameOverride Fullname override \"\" podSecurityContext Pod security context {} nodeSelector Node selector {} tolerations Tolerations [] affinity Affinity {} resources Resources {}","title":"Generic"},{"location":"setup/kyma/","text":"Setup in Kyma Deploy XSK in SAP BTP 1 , Kyma environment. Prerequisites Install kubectl - this step is optional. Access to SAP BTP account (the Trial landscape can be accessed here ). Warning At the time of writing the setup manual (19.08.2021) , creation of HANA Cloud service instance in the SAP BTP Kyma environment was not possible, thus the setup is suitable only for test & demo purposes. Workaround solution could be found here . Steps Access the SAP BTP, Kyma environment via the SAP BTP cockpit: Deploy XSK: Copy and paste the following content into deployment.yaml : apiVersion : apps/v1 kind : Deployment metadata : name : xsk namespace : default spec : replicas : 1 selector : matchLabels : app : xsk template : metadata : labels : app : xsk spec : containers : - name : xsk image : dirigiblelabs/xsk-kyma:latest imagePullPolicy : Always env : - name : DIRIGIBLE_THEME_DEFAULT value : fiori - name : DIRIGIBLE_HOST value : https://xsk.<your-kyma-cluster-host> volumeMounts : - name : dirigible-volume mountPath : /usr/local/tomcat/target/dirigible/repository ports : - containerPort : 8080 name : dirigible protocol : TCP volumes : - name : xsk-volume persistentVolumeClaim : claimName : xsk-claim --- apiVersion : v1 kind : Service metadata : labels : app : xsk name : xsk namespace : default spec : ports : - name : xsk port : 8080 protocol : TCP targetPort : 8080 selector : app : xsk type : ClusterIP --- apiVersion : v1 kind : PersistentVolumeClaim metadata : name : xsk-claim spec : accessModes : - ReadWriteOnce resources : requests : storage : 1Gi --- apiVersion : gateway.kyma-project.io/v1alpha1 kind : APIRule metadata : name : xsk namespace : default spec : gateway : kyma-gateway.kyma-system.svc.cluster.local rules : - accessStrategies : - config : {} handler : noop methods : - GET - POST - PUT - PATCH - DELETE - HEAD path : /.* service : host : xsk.<your-kyma-cluster-host> name : xsk port : 8080 Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com )._ XSK versions Instead of using the latest tag (version), for production and development use cases it is recomended to use stable release version: All released versions can be found here . All XSK Docker images and tags (versions) can be found here . Navigate to your Kyma dashboard and select the default namespace. Click on the Deploy new resource button and select the deployment.yaml file. Note Alternatively the kubectl -f deployment.yaml could be used to deploy the resources. Create XSUAA service instance: From the Kyma dashboard, go to Service Management \u2192 Catalog . Find the Authorization & Trust Management service. Create new service instance. Provide the following additional parameters. { \"xsappname\" : \"dirigible-xsuaa\" , \"oauth2-configuration\" : { \"token-validity\" : 7200 , \"redirect-uris\" : [ \"https://dirigible.<your-kyma-cluster-host>\" ] }, \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com ). Bind the servce instance to the xsk application. Assign the Developer and Operator roles. Log in. Additional Materials Step by step tutorial can be found here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Kyma"},{"location":"setup/kyma/#setup-in-kyma","text":"Deploy XSK in SAP BTP 1 , Kyma environment. Prerequisites Install kubectl - this step is optional. Access to SAP BTP account (the Trial landscape can be accessed here ). Warning At the time of writing the setup manual (19.08.2021) , creation of HANA Cloud service instance in the SAP BTP Kyma environment was not possible, thus the setup is suitable only for test & demo purposes. Workaround solution could be found here .","title":"Setup in Kyma"},{"location":"setup/kyma/#steps","text":"Access the SAP BTP, Kyma environment via the SAP BTP cockpit: Deploy XSK: Copy and paste the following content into deployment.yaml : apiVersion : apps/v1 kind : Deployment metadata : name : xsk namespace : default spec : replicas : 1 selector : matchLabels : app : xsk template : metadata : labels : app : xsk spec : containers : - name : xsk image : dirigiblelabs/xsk-kyma:latest imagePullPolicy : Always env : - name : DIRIGIBLE_THEME_DEFAULT value : fiori - name : DIRIGIBLE_HOST value : https://xsk.<your-kyma-cluster-host> volumeMounts : - name : dirigible-volume mountPath : /usr/local/tomcat/target/dirigible/repository ports : - containerPort : 8080 name : dirigible protocol : TCP volumes : - name : xsk-volume persistentVolumeClaim : claimName : xsk-claim --- apiVersion : v1 kind : Service metadata : labels : app : xsk name : xsk namespace : default spec : ports : - name : xsk port : 8080 protocol : TCP targetPort : 8080 selector : app : xsk type : ClusterIP --- apiVersion : v1 kind : PersistentVolumeClaim metadata : name : xsk-claim spec : accessModes : - ReadWriteOnce resources : requests : storage : 1Gi --- apiVersion : gateway.kyma-project.io/v1alpha1 kind : APIRule metadata : name : xsk namespace : default spec : gateway : kyma-gateway.kyma-system.svc.cluster.local rules : - accessStrategies : - config : {} handler : noop methods : - GET - POST - PUT - PATCH - DELETE - HEAD path : /.* service : host : xsk.<your-kyma-cluster-host> name : xsk port : 8080 Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com )._ XSK versions Instead of using the latest tag (version), for production and development use cases it is recomended to use stable release version: All released versions can be found here . All XSK Docker images and tags (versions) can be found here . Navigate to your Kyma dashboard and select the default namespace. Click on the Deploy new resource button and select the deployment.yaml file. Note Alternatively the kubectl -f deployment.yaml could be used to deploy the resources. Create XSUAA service instance: From the Kyma dashboard, go to Service Management \u2192 Catalog . Find the Authorization & Trust Management service. Create new service instance. Provide the following additional parameters. { \"xsappname\" : \"dirigible-xsuaa\" , \"oauth2-configuration\" : { \"token-validity\" : 7200 , \"redirect-uris\" : [ \"https://dirigible.<your-kyma-cluster-host>\" ] }, \"scopes\" : [ { \"name\" : \"$XSAPPNAME.Developer\" , \"description\" : \"Developer scope\" }, { \"name\" : \"$XSAPPNAME.Operator\" , \"description\" : \"Operator scope\" } ], \"role-templates\" : [ { \"name\" : \"Developer\" , \"description\" : \"Developer related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"Operator\" , \"description\" : \"Operator related roles\" , \"scope-references\" : [ \"$XSAPPNAME.Operator\" ] } ], \"role-collections\" : [ { \"name\" : \"XSK Developer\" , \"description\" : \"XSK Developer\" , \"role-template-references\" : [ \"$XSAPPNAME.Developer\" ] }, { \"name\" : \"XSK Operator\" , \"description\" : \"XSK Operator\" , \"role-template-references\" : [ \"$XSAPPNAME.Operator\" ] } ] } Note Replace the <your-kyma-cluster-host> placeholder with your Kyma cluster host (e.g. c-xxxxxxx.kyma.xxx.xxx.xxx.ondemand.com ). Bind the servce instance to the xsk application. Assign the Developer and Operator roles. Log in. Additional Materials Step by step tutorial can be found here . SAP Cloud Platform is called SAP Business Technology Platform (SAP BTP) as of 2021. \u21a9","title":"Steps"},{"location":"setup/setup-environment-variables/","text":"Environment Variables Configuration Types Based on the layer, they are defined, configuration variables have the following priorities: Runtime Highest precedence: No rebuild or restart of the application is required when configuration is changed. The Configuration API could be used to apply changes in the Runtime configuration. Environment Second precedence: No rebuild is required when configuration is changed, however the application should be restarted, to apply the environment changes. Usually the Environment configurations are provided during the application deployment, as part of application descriptor (e.g. Define environment variable for container in Kubernetes or in Cloud Foundry App Manifest ) . Deployment Third precedence: Rebuild and re-deployment is required. \"Default\" deployment ( ROOT.war ) configuration variables are taken from dirigible.properties properties file (sample could be found here ) . Module Lowest precedence: Rebuild and re-deployment is required. \"Default\" module (e.g. dirigible-database-custom.jar , dirigible-database-h2.jar ) configuration variables are taken from dirigible-xxx.properties properties files (sample could be found here and here ) Note The precedence order means that, if the there is an Environment variable with name DIRIGIBLE_TEST and Runtime variable with the same name, the Runtime variable will have high prority and will be applied. All applied configuration values could be found under the Configurations View . Configuration Parameters HDI Parameter Description Default* XSK_HDI_SUPPORTED Whether the HDI API is supported by the database (e.g. HANA) true XSK_HDI_ONLY Database models to be processed only via the HDI API false Note: All Eclipse Dirigible related environment variables could be found here .","title":"Environment Variables"},{"location":"setup/setup-environment-variables/#environment-variables","text":"","title":"Environment Variables"},{"location":"setup/setup-environment-variables/#configuration-types","text":"Based on the layer, they are defined, configuration variables have the following priorities: Runtime Highest precedence: No rebuild or restart of the application is required when configuration is changed. The Configuration API could be used to apply changes in the Runtime configuration. Environment Second precedence: No rebuild is required when configuration is changed, however the application should be restarted, to apply the environment changes. Usually the Environment configurations are provided during the application deployment, as part of application descriptor (e.g. Define environment variable for container in Kubernetes or in Cloud Foundry App Manifest ) . Deployment Third precedence: Rebuild and re-deployment is required. \"Default\" deployment ( ROOT.war ) configuration variables are taken from dirigible.properties properties file (sample could be found here ) . Module Lowest precedence: Rebuild and re-deployment is required. \"Default\" module (e.g. dirigible-database-custom.jar , dirigible-database-h2.jar ) configuration variables are taken from dirigible-xxx.properties properties files (sample could be found here and here ) Note The precedence order means that, if the there is an Environment variable with name DIRIGIBLE_TEST and Runtime variable with the same name, the Runtime variable will have high prority and will be applied. All applied configuration values could be found under the Configurations View .","title":"Configuration Types"},{"location":"setup/setup-environment-variables/#configuration-parameters","text":"","title":"Configuration Parameters"},{"location":"setup/setup-environment-variables/#hdi","text":"Parameter Description Default* XSK_HDI_SUPPORTED Whether the HDI API is supported by the database (e.g. HANA) true XSK_HDI_ONLY Database models to be processed only via the HDI API false Note: All Eclipse Dirigible related environment variables could be found here .","title":"HDI"}]}